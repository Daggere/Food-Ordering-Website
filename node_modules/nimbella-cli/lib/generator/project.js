"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.seemsToBeProject=exports.createOrUpdateProject=void 0;const fs=require("fs"),path=require("path"),yaml=require("js-yaml"),nimbella_deployer_1=require("nimbella-deployer"),samples_1=require("./samples");async function createOrUpdateProject(e,t,a,r){const{target:n,clean:s,config:o}=a,{kind:i,sampleText:c}=languageToKindAndSample(a.language,r);let l=o?configTemplate():n||s?{}:void 0;const p=path.join(t.name,"project.yml"),m=path.join(t.name,"packages","default");if(fs.existsSync(t.name))if(e||a.overwrite)if(seemsToBeProject(t.name)){if(fs.existsSync(p)){const e=String(fs.readFileSync(p));e.includes("${")&&r.handleError("Current restriction: project update does not work if there are symbolic substitutions in the configuration"),l=yaml.safeLoad(e)}i&&!fs.existsSync(m)&&fs.mkdirSync(m,{recursive:!0})}else r.handleError(`A directory or file '${t.name}' does not appear to be a project`);else r.handleError(`Cannot create project because '${t.name}' already exists in the file system, use '-o' to overwrite`);else{fs.mkdirSync(m,{recursive:!0});const e=path.join(t.name,"web");fs.mkdirSync(e)}if(n&&(l.targetNamespace=n),"boolean"==typeof s&&(l.cleanNamespace=s),i&&generateSample(i,o?l:void 0,c,m),l){const e=yaml.safeDump(l);fs.writeFileSync(p,e)}r.log(`project ${e?"updated":"created"} at ${t.name}`)}function configTemplate(){const e={targetNamespace:"",cleanNamespace:!1,bucket:{},parameters:{},packages:[]};return e.packages.push({name:"default",shared:!1,clean:!1,environment:{},parameters:{},annotations:{},actions:[]}),e}function languageToKindAndSample(e,t){return e?(e=e.toLowerCase(),["go","js","ts","py","java","php","swift"].includes(e)?{kind:e+":default",sampleText:samples_1.samples[e]}:void t.handleError(e+" is not a supported language")):{kind:void 0,sampleText:void 0}}function generateSample(e,t,a,r){e=mapLanguage(e);const n=nimbella_deployer_1.extFromRuntime(e,!1),s=path.join(r,"hello."+n);if(fs.writeFileSync(s,a),t){const a={name:"hello",clean:!1,binary:!1,main:"",runtime:e,web:!0,webSecure:!1,parameters:{},environment:{},annotations:{},limits:{}};t.packages.find(e=>"default"===e.name).actions.push(a)}}function mapLanguage(e){let[t,a]=e.split(":");switch(t){case"js":t="nodejs";break;case"ts":t="typescript";break;case"py":t="python"}return`${t}:${a}`}function seemsToBeProject(e){if(fs.existsSync(e)&&fs.lstatSync(e).isDirectory()){const t=fs.readdirSync(e,{withFileTypes:!0});for(const e of t){if("project.yml"===e.name&&e.isFile())return!0;if("packages"===e.name&&e.isDirectory())return!0;if("web"===e.name&&e.isDirectory())return!0}}return!1}exports.createOrUpdateProject=createOrUpdateProject,exports.seemsToBeProject=seemsToBeProject;
