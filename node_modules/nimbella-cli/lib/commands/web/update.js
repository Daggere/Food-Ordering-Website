"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),path_1=require("path"),fs_1=require("fs"),ui_1=require("../../ui"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),clients_1=require("../../storage/clients");class WebContentUpdate extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,a,n,i){const{client:o}=await clients_1.getWebStorageClient(a,n,nimbella_deployer_2.authPersister);o||i.handleError(`Couldn't get to the web storage, ensure it's enabled for the ${a.namespace||"current"} namespace`),await this.uploadFile(a.webContentPath,n.destination,n.cache,o,i).catch(e=>i.handleError("",e))}async uploadFile(e,t,a,n,i){if(!fs_1.existsSync(e))return void i.log(e+" doesn't exist");if(!fs_1.lstatSync(e).isFile())return void i.log(e+" is not a valid file");const o=path_1.basename(e);let s=e;path_1.isAbsolute(e)&&(s=o),t&&(s=t);const r=await ui_1.spinner(),[d]=await n.file(s).exists();d?(r.start("updating "+s,"uploading",{stdout:!0}),await n.upload(e,{destination:s,gzip:!0,metadata:{cacheControl:a?"public, max-age="+a:"no-cache"}}).then(e=>r.stop("done"))):i.log(`${s} doesn't exist, use 'web:create' to add it. e.g. nim web add ${o}`)}}exports.default=WebContentUpdate,WebContentUpdate.description="Updates Content in the Web Storage",WebContentUpdate.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to update content in"}),destination:command_1.flags.string({char:"d",description:"Target location in web storage"}),cache:command_1.flags.integer({char:"c",description:"Maximum amount of time in seconds, the web content is considered fresh, relative to the time of the request"})},nimbella_deployer_1.NimBaseCommand.flags),WebContentUpdate.args=[{name:"webContentPath",description:"Path to the content to be updated",required:!0},{name:"namespace",description:"The namespace to update content in (current namespace if omitted)",required:!1}];
