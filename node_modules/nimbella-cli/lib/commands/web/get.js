"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),clients_1=require("../../storage/clients"),fs_1=require("fs"),path_1=require("path"),ui_1=require("../../ui"),util_1=require("../../storage/util");class WebContentGet extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,n,o,a){const{client:i,creds:s}=await clients_1.getWebStorageClient(n,o,nimbella_deployer_2.authPersister);if(i||a.handleError(`Couldn't get to the web storage, ensure it's enabled for the ${n.namespace||"current"} namespace`),o.url){const[e]=await i.file(n.webContentName).exists();if(e){const e=new URL(s.ow.apihost);return void a.log(`https://${s.namespace}-${e.hostname}/${n.webContentName}`)}a.log(n.webContentName+" is not available.")}else await this.downloadFile(n.webContentName,n.destination,i,a,o.saveAs,o.save).catch(e=>a.handleError("",e))}async downloadFile(e,t,n,o,a,i=!1){if(!fs_1.existsSync(t))return void o.log(t+" doesn't exist");const s=await ui_1.spinner();if(s.start("getting "+e,"downloading",{stdout:!0}),i||a){const o=path_1.basename(e);await n.file(e).download({destination:path_1.join(t,a||o)}).then(e=>s.stop("done"))}else n.file(e).download((function(t,n){t?(s.stop("couldn't print content"),util_1.errorHandler(t,o,e)):(s.stop(),o.log("\n"),o.log(String.fromCharCode.apply(null,n)))}))}}exports.default=WebContentGet,WebContentGet.description="Gets Content from the Web Storage",WebContentGet.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to get web content from"}),save:command_1.flags.boolean({char:"s",description:"Saves content on file system"}),saveAs:command_1.flags.string({description:"Saves content on file system with the given name"}),url:command_1.flags.boolean({char:"r",description:"Get web content url"})},nimbella_deployer_1.NimBaseCommand.flags),WebContentGet.args=[{name:"webContentName",description:"The web content to get",required:!0},{name:"destination",description:"The location to write at",required:!0,default:"./"},{name:"namespace",description:"The namespace to get content from (current namespace if omitted)",required:!1}];
