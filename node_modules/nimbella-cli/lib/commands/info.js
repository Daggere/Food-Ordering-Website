"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),ui_1=require("../ui");class Info extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,i,n,s,o){if(s.license&&!nimbella_deployer_1.inBrowser)await this.displayAncillary("license",o);else if(s.changes&&!nimbella_deployer_1.inBrowser)await this.displayAncillary("changes",o);else if(s.runtimes||s.limits){const e=await this.getSystemInfo(s.apihost,o);s.runtimes?this.displayRuntimes(e,o):this.displayLimits(e,o)}else{let e;try{e=require("../../version.json")}catch(i){e=require("../../package.json")}const i=require("@adobe/aio-cli-plugin-runtime/package.json");o.log("Nimbella CLI version: "+e.version),o.log("Adobe I/O version:    "+i.version),nimbella_deployer_1.inBrowser||(o.log("'nim info --license' to display the license"),o.log("'nim info --changes' to display the change history")),o.log("'nim info --runtimes' to display the supported runtimes"),o.log("'nim info --limits' to display the limits")}}async displayAncillary(e,i){try{const i=require.resolve(`../../${e}.html`);await ui_1.open(i)}catch(n){i.displayError("",n),i.log("Packaging error: cannot locate "+e)}}async displayRuntimes(e,i){const n=[],s=e.runtimes;for(const e in s)for(const i of s[e])n.push([e,i.kind,i.default?"(default)":""]);const o=n.reduce((e,i)=>i[0].length>e?i[0].length:e,0),l=n.reduce((e,i)=>i[1].length>e?i[1].length:e,0),a=n.map(e=>e[0].padEnd(o+1," ")+e[1].padEnd(l+1," ")+e[2]);i.log("Language".padEnd(o+1," ")+"Kind".padEnd(l+1)," ");for(const e of a.sort())i.log(e)}async displayLimits(e,i){const n=e.limits;for(const e in n)i.log(`${e}: ${this.formatUnits(e,n[e])}`)}formatUnits(e,i){return e.includes("duration")?i>1e3?i/1e3+" seconds":i+" ms":e.includes("memory")?i/1048576+" mb":e.includes("logs")?i/1024+" kb":String(i)}async getSystemInfo(e,i){if(e)e=nimbella_deployer_1.parseAPIHost(e);else{e=(await nimbella_deployer_1.getCredentials(nimbella_deployer_1.authPersister).catch(e=>i.handleError("",e))).ow.apihost}const n=e+"/api/v1";return await nimbella_deployer_1.wskRequest(n,void 0).catch(e=>i.handleError("",e))}}exports.default=Info,Info.description="Show information about this version of 'nim'",Info.flags=Object.assign({license:command_1.flags.boolean({description:"Display the license",hidden:nimbella_deployer_1.inBrowser}),changes:command_1.flags.boolean({description:"Display the change history",hidden:nimbella_deployer_1.inBrowser}),runtimes:command_1.flags.boolean({description:"List the supported runtimes"}),limits:command_1.flags.boolean({description:"List the applicable Nimbella system limits"}),apihost:command_1.flags.string({description:"API host to query for runtimes and limits (ignored otherwise)",hidden:!0})},nimbella_deployer_1.NimBaseCommand.flags),Info.args=[];
