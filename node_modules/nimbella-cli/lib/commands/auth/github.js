"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),oauth_1=require("../../oauth"),nimbella_deployer_2=require("nimbella-deployer"),ui_1=require("../../ui");let cli;class AuthGithub extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,a,i,o){const n=[i.add,i.initial,i.switch,i.list,i.delete,i.show].filter(Boolean).length;n>1?o.handleError("only one of '--add', '--initial', '--list', '--switch', '--delete', or '--show' may be specified"):1==n&&(i.token||i.username)?o.handleError("--token and --username may not be combined with other flags"):(i.token&&!i.username||i.username&&!i.token)&&o.handleError("--token and --username must both be specified if either one is specified"),i.switch?await this.doSwitch(i.switch,o):i.list?await this.doList(o):i.add||i.initial?await this.doAdd(o,i.initial,void 0,void 0):i.token&&i.username?await this.doAdd(o,!1,i.username,i.token):i.delete?await this.doDelete(i.delete,o):i.show?await this.doShow(i.show,o):this.doHelp()}async doAdd(e,t,a,i){if(a&&i)await nimbella_deployer_2.addGithubAccount(a,i,nimbella_deployer_2.authPersister);else{const i=await nimbella_deployer_2.getGithubAccounts(nimbella_deployer_2.authPersister);if(t&&Object.keys(i).length>0){const t=Object.keys(i).join(", ");return e.log("you already have GitHub credentials: "+t),void e.log("Doing nothing.  Use '--add' if you really want to add more accounts")}{const o=await oauth_1.doOAuthFlow(e,!0,void 0);if(oauth_1.isGithubProvider(o)){const n=!t&&!!i[o.name];await nimbella_deployer_2.addGithubAccount(o.name,o.key,nimbella_deployer_2.authPersister),a=o.name,n&&e.log(`You already had an entry for username '${o.name}'.  It was replaced`)}else{if(!0===o)return void await ui_1.prompt("Workbench will restart with added GitHub credentials (please wait)");e.handleError(`GitHub authentication failed, response was '${o}'`)}}}e.log(`the GitHub account of user name '${a}' was added and is now current`)}async doSwitch(e,t){await nimbella_deployer_2.switchGithubAccount(e,nimbella_deployer_2.authPersister)?t.log(`the GitHub account of user name '${e}' is now current`):t.handleError(e+" is not a previously added GitHub account")}async doList(e){const t=await nimbella_deployer_2.getGithubAccounts(nimbella_deployer_2.authPersister);this.debug("accounts: %O",t);const a=Object.keys(t);if(this.debug("accountNames: %O",a),a.length>0){const t=a.join(", ");e.log("previously added GitHub accounts: "+t)}else e.log("no previously added GitHub accounts")}async doShow(e,t){const a=await nimbella_deployer_2.getGithubAccounts(nimbella_deployer_2.authPersister);a[e]?t.log(a[e]):t.handleError(e+" is not a previously added GitHub account")}async doDelete(e,t){switch(await nimbella_deployer_2.deleteGithubAccount(e,nimbella_deployer_2.authPersister)){case"DeletedOk":t.log(`the GitHub account of user name '${e}' is removed from the credential store`);break;case"DeletedDangling":t.log(`the GitHub account of user name '${e}' is removed from the credential store`),t.log(`'${e}' was the current account; use 'nim auth github [ --add | --switch ] to establish a new one`);break;case"NotExists":t.handleError(e+" does not denote a previously added GitHub account")}}}exports.default=AuthGithub,AuthGithub.description="Manage GitHub accounts",AuthGithub.flags=Object.assign({add:command_1.flags.boolean({char:"a",description:"Add a second or subsequent GitHub account interactively"}),delete:command_1.flags.string({char:"d",description:"Forget a previously added GitHub account"}),initial:command_1.flags.boolean({char:"i",description:"Add an initial GitHub account interactively"}),list:command_1.flags.boolean({char:"l",description:"List previously added GitHub accounts"}),show:command_1.flags.string({description:"Show the access token currently associated with a username"}),switch:command_1.flags.string({char:"s",description:"Switch to using a particular previously added GitHub account"}),token:command_1.flags.string({description:"The GitHub token when adding an account manually"}),username:command_1.flags.string({description:"The GitHub username when adding an account manually"})},nimbella_deployer_1.NimBaseCommand.flags),AuthGithub.args=[],AuthGithub.strict=!1;
