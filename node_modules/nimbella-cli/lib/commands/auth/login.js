"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),oauth_1=require("../../oauth"),ui_1=require("../../ui");class AuthLogin extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,a,i,o,n){let r;const t=nimbella_deployer_1.parseAPIHost(o.apihost)||(o.admin?void 0:"https://apigcp.nimbella.io");if(i.token)o.auth&&n.handleError("You cannot specify both a login token and an auth key.  Use one or the other"),(o.admin||o.namespace)&&n.handleError("Internal error: incorrect use of administrative flags"),r=await nimbella_deployer_2.doLogin(i.token,nimbella_deployer_2.authPersister,t).catch(e=>this.handleError("",e));else if(o.admin)(o.auth||o.namespace||!t)&&n.handleError("Internal error: incorrect use of administrative flags"),r=await nimbella_deployer_2.doAdminLogin(t).catch(e=>this.handleError("",e));else if(o.auth)r=await nimbella_deployer_2.addCredentialAndSave(t,o.auth,void 0,!1,nimbella_deployer_2.authPersister,o.namespace,!!o.namespace).catch(e=>n.handleError("",e)),nimbella_deployer_2.authPersister.saveLegacyInfo(t,o.auth);else{const e=await oauth_1.doOAuthFlow(n,!1,o.apihost).catch(e=>n.handleError("",e));if(oauth_1.isFullCredentials(e))r=await nimbella_deployer_2.doInteractiveLogin(e,nimbella_deployer_2.authPersister).catch(e=>n.handleError("",e));else{if(!0===e)return void(nimbella_deployer_2.inBrowser?await ui_1.prompt("Login will restart the workbench with appropriate credentials (please wait)"):(n.log("If you logged in, your account is being provisioned and should be ready in a minute or two."),n.log("Try another 'nim auth login' then.")));n.handleError(`Login failed.  Response was '${e}'`)}}n.log(`Stored a credential set for namespace '${r.namespace}' on host '${t}'`)}}exports.default=AuthLogin,AuthLogin.description="Gain access to a Nimbella namespace",AuthLogin.flags=Object.assign({apihost:command_1.flags.string({description:"API host to use for authentication"}),auth:command_1.flags.string({char:"u",description:"API key to use for authentication"}),admin:command_1.flags.boolean({hidden:!0}),namespace:command_1.flags.string({hidden:!0})},nimbella_deployer_1.NimBaseCommand.flags),AuthLogin.args=[{name:"token",description:"String provided by Nimbella Corp",required:!1}],AuthLogin.aliases=["login"];
