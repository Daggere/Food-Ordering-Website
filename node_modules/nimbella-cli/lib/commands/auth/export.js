"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const nimbella_deployer_1=require("nimbella-deployer"),command_1=require("@oclif/command"),nimbella_deployer_2=require("nimbella-deployer"),oauth_1=require("../../oauth");class AuthExport extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,a,o,n,t){const i=nimbella_deployer_1.parseAPIHost(n.apihost),r=n["non-expiring"];let s;o.namespace&&(s=await nimbella_deployer_1.disambiguateNamespace(o.namespace,i).catch(e=>t.handleError("",e)));const l=await(s?nimbella_deployer_2.getCredentialsForNamespace(s,i,nimbella_deployer_2.authPersister):nimbella_deployer_2.getCredentials(nimbella_deployer_2.authPersister)).catch(e=>t.handleError("",e)),m=await oauth_1.getCredentialsToken(l.ow,t,r);n.json?t.logJSON({token:m}):(t.log(`The following token encodes credentials for namespace '${l.namespace}' on host '${l.ow.apihost}'`),r?t.log("It may be used with `nim auth login` and does not expire."):t.log("It may be used with `nim auth login` within the next five minutes."),t.log(m))}}exports.default=AuthExport,AuthExport.description="Make a token for switching to another machine or web browser",AuthExport.flags=Object.assign({apihost:command_1.flags.string({description:"API host serving the namespace"}),"non-expiring":command_1.flags.boolean({description:"Generate non-expiring token (for functional ids and integrations)"}),json:command_1.flags.boolean({description:'Get response as a JSON object with a "token:" member'})},nimbella_deployer_1.NimBaseCommand.flags),AuthExport.args=[{name:"namespace",description:"The namespace to export (omit for current namespace)",required:!1}];
