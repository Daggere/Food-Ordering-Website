"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),clients_1=require("../../storage/clients"),fs_1=require("fs"),path_1=require("path"),ui_1=require("../../ui"),util_1=require("../../storage/util");class ObjectGet extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,o,a,n){const{client:i}=await clients_1.getObjectStorageClient(o,a,nimbella_deployer_2.authPersister);i||n.handleError(`Couldn't get to the object store, ensure it's enabled for the ${o.namespace||"current"} namespace`),await this.downloadFile(o.objectName,o.destination,i,n,a.saveAs,a.save).catch(e=>n.handleError("",e))}async downloadFile(e,t,o,a,n,i=!1){if(!fs_1.existsSync(t))return void a.log(t+" doesn't exist");const s=await ui_1.spinner();if(s.start("getting "+e,"downloading",{stdout:!0}),i||n){const a=path_1.basename(e);await o.file(e).download({destination:path_1.join(t,n||a)}).then(e=>s.stop("done"))}else o.file(e).download((function(t,o){t?(s.stop("couldn't print content"),util_1.errorHandler(t,a,e)):(s.stop(),a.log("\n"),a.log(String.fromCharCode.apply(null,o)))}))}}exports.default=ObjectGet,ObjectGet.description="Gets Object from the Object Store",ObjectGet.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to get object from"}),save:command_1.flags.boolean({char:"s",description:"Saves object on file system"}),saveAs:command_1.flags.string({description:"Saves object on file system with the given name"})},nimbella_deployer_1.NimBaseCommand.flags),ObjectGet.args=[{name:"objectName",description:"The object to get",required:!0},{name:"destination",description:"The location to write object at",required:!0,default:"./"},{name:"namespace",description:"The namespace to get object from (current namespace if omitted)",required:!1}];
