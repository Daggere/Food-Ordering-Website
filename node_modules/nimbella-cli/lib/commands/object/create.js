"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),path_1=require("path"),fs_1=require("fs"),ui_1=require("../../ui"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),clients_1=require("../../storage/clients");class ObjectCreate extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,a,i,o){const{client:s}=await clients_1.getObjectStorageClient(a,i,nimbella_deployer_2.authPersister);s||o.handleError(`Couldn't get to the object store, ensure it's enabled for the ${a.namespace||"current"} namespace`),await this.uploadFile(a.objectPath,i.destination,s,o).catch(e=>o.handleError("",e))}async uploadFile(e,t,a,i){if(!fs_1.existsSync(e))return void i.log(e+" doesn't exist");if(!fs_1.lstatSync(e).isFile())return void i.log(e+" is not a valid file");const o=path_1.basename(e);let s=e;path_1.isAbsolute(e)&&(s=o),t&&(s=t.endsWith("/")?path_1.join(t,o):t);const n=await ui_1.spinner(),[r]=await a.file(s).exists();r?i.log(`${s} already exists, use 'object:update' to update it. e.g. nim object update ${o}`):(n.start("adding "+o,"uploading",{stdout:!0}),await a.upload(e,{destination:s,gzip:!0}).then(e=>n.stop("done")))}}exports.default=ObjectCreate,ObjectCreate.description="Adds Object to the Object Store",ObjectCreate.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to add object to"}),destination:command_1.flags.string({char:"d",description:"Target location in object storage"})},nimbella_deployer_1.NimBaseCommand.flags),ObjectCreate.args=[{name:"objectPath",description:"The object to be added",required:!0},{name:"namespace",description:"The namespace to add object to (current namespace if omitted)",required:!1}],ObjectCreate.aliases=["objects:add","object:add"];
