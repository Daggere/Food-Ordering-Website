"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),path_1=require("path"),fs_1=require("fs"),ui_1=require("../../ui"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),clients_1=require("../../storage/clients");class ObjectUpdate extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,a,i,n){const{client:o}=await clients_1.getObjectStorageClient(a,i,nimbella_deployer_2.authPersister);o||n.handleError(`Couldn't get to the object store, ensure it's enabled for the ${a.namespace||"current"} namespace`),await this.uploadFile(a.objectPath,i.destination,o,n).catch(e=>n.handleError("",e))}async uploadFile(e,t,a,i){if(!fs_1.existsSync(e))return void i.log(e+" doesn't exist");if(!fs_1.lstatSync(e).isFile())return void i.log(e+" is not a valid file");const n=path_1.basename(e);let o=e;path_1.isAbsolute(e)&&(o=n),t&&(o=t);const s=await ui_1.spinner(),[r]=await a.file(o).exists();r?(s.start("updating "+o,"uploading",{stdout:!0}),await a.upload(e,{destination:o,gzip:!0}).then(e=>s.stop("done"))):i.log(`${o} doesn't exist, use 'object:add' to add it. e.g. nim object add ${n}`)}}exports.default=ObjectUpdate,ObjectUpdate.description="Updates Object in the Object Store",ObjectUpdate.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to update object in"}),destination:command_1.flags.string({char:"d",description:"Target location in object storage"})},nimbella_deployer_1.NimBaseCommand.flags),ObjectUpdate.args=[{name:"objectPath",description:"The object to be updated",required:!0},{name:"namespace",description:"The namespace to update object in (current namespace if omitted)",required:!1}];
