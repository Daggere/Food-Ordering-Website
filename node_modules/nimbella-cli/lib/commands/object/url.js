"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),clients_1=require("../../storage/clients"),util_1=require("../../storage/util");class ObjectUrl extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,t,r,i,a){const{client:o}=await clients_1.getObjectStorageClient(r,i,nimbella_deployer_2.authPersister);o||a.handleError(`Couldn't get to the object store, ensure it's enabled for the ${r.namespace||"current"} namespace`);try{const e=await o.file(r.objectName),t=60*i.ttl*1e3,n={version:"v4",action:i.permission,expires:Date.now()+t};"write"===i.permission&&(n.contentType="application/octet-stream");const[s]=await e.getSignedUrl(n);return void a.log(s)}catch(e){util_1.errorHandler(e,a,r.objectName)}}}exports.default=ObjectUrl,ObjectUrl.description="Generates Signed URL for an Object in the Object Store",ObjectUrl.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to get object URL from"}),permission:command_1.flags.string({char:"p",description:"Permission applicable on the URL",options:["read","write"],default:"read"}),ttl:command_1.flags.integer({char:"t",description:"Expiration time of the URL (in Minutes)",default:15})},nimbella_deployer_1.NimBaseCommand.flags),ObjectUrl.args=[{name:"objectName",description:"The object to get URL for",required:!0},{name:"namespace",description:"The namespace to get object from (current namespace if omitted)",required:!1}];
