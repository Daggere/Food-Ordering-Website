"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const nimbella_deployer_1=require("nimbella-deployer"),project_1=require("../../generator/project"),create_1=require("./create"),command_1=require("@oclif/command"),confPlugin="apispecgen";class ProjectUpdate extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,r,o,t,n){if(t.source||t.config||this.doHelp(),nimbella_deployer_1.inBrowser&&n.handleError("'project update' needs local file access. Use the 'nim' CLI on your local machine"),project_1.seemsToBeProject(process.cwd())||n.handleError("Current directory doesn't appear to be a project"),t.config){const e=this.config.commands.filter(e=>e.pluginName.endsWith(confPlugin)),r=[];return t.overwrite&&r.push("-o"),void(e.length?await e[0].load().run([...r]):n.handleError("the apispecgen plugin is not installed. try 'nim plugins add apispecgen'"))}if(t.source){const e=["-i",t.id||"","-k",t.key||"","-l",t.language,"--update"];t.overwrite&&e.push("-o"),t.updateSource&&e.push("-u"),t.clientCode&&e.push("-c");const r=this.config.commands.filter(e=>e.pluginName.endsWith(t.source));if(r.length){const o=r.filter(e=>e.id===create_1.default.plugins[t.source]);await o[0].load().run([...e])}else n.handleError(`the ${t.source} plugin is not installed. try 'nim plugins add ${t.source}'`)}else await project_1.createOrUpdateProject(!0,o,t,n)}}exports.default=ProjectUpdate,ProjectUpdate.description="Update a Nimbella Project",ProjectUpdate.flags=Object.assign(create_1.default.flags,{config:command_1.flags.boolean({description:"Generate config file"})}),ProjectUpdate.hidden=!0;
