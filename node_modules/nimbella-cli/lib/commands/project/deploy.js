"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.doDeploy=exports.processCredentials=exports.ProjectDeploy=void 0;const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),path=require("path");class ProjectDeploy extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,o,t,i,a){0==o.length&&this.doHelp();const n=o.some(e=>nimbella_deployer_2.isGithubRef(e)),{target:r,env:l,apihost:s,auth:p,insecure:d,production:c,yarn:m,incremental:u,include:y,exclude:b}=i;u&&n&&a.handleError("'--incremental' may not be used with GitHub projects"),nimbella_deployer_2.inBrowser&&!n&&a.handleError("only GitHub projects are deployable from the cloud"),!n||i["anon-github"]||nimbella_deployer_2.getGithubAuth(nimbella_deployer_2.authPersister)||a.handleError("you don't have GitHub authorization.  Use 'nim auth github --initial' to activate it.");const g={verboseBuild:i["verbose-build"],verboseZip:i["verbose-zip"],production:c,incremental:u,env:l,yarn:m,webLocal:i["web-local"],include:y,exclude:b};this.debug("cmdFlags",g);const{creds:h,owOptions:_}=await processCredentials(d,s,p,r,a);this.debug("creds",h);let f=!0;const w=o.length>1;for(const e of o)w&&a.log("\nReading project '"+e),f=f&&await doDeploy(e,g,h,_,!1,a);f||a.exit(1)}}async function processCredentials(e,o,t,i,a){const n={ignore_certs:e};o&&(n.apihost=nimbella_deployer_1.parseAPIHost(o)),t&&(n.api_key=t);let r=void 0;return i?(i=await nimbella_deployer_1.disambiguateNamespace(i,n.apihost).catch(e=>a.handleError("",e)),r=await nimbella_deployer_2.getCredentialsForNamespace(i,n.apihost,nimbella_deployer_2.authPersister).catch(e=>a.handleError("",e))):o&&t&&(r={namespace:void 0,ow:n,storageKey:void 0,redis:!1}),{creds:r,owOptions:n}}async function doDeploy(e,o,t,i,a,n){let r=await nimbella_deployer_2.readAndPrepare(e,i,t,nimbella_deployer_2.authPersister,o,void 0,new nimbella_deployer_1.NimFeedback(n));if(!r)return!1;if(r.error)return n.displayError("",r.error),!1;if(a||displayHeader(e,r.credentials,n),r=await nimbella_deployer_2.buildProject(r),r.error)return n.displayError("",r.error),!1;return displayResult(await nimbella_deployer_2.deploy(r),a,o.webLocal,n)}function displayHeader(e,o,t){let i="";o&&o.namespace&&(i=`\n  to namespace '${o.namespace}'`);let a="";o&&o.ow.apihost&&(a=`\n  on host '${o.ow.apihost}'`);const n=nimbella_deployer_2.isGithubRef(e)?e:path.resolve(e);t.log(`Deploying project '${n}'${i}${a}`)}function displayResult(e,o,t,i){let a=!0;if(0==e.successes.length&&0==e.failures.length)i.log("\nNothing deployed");else{i.log("");const n=[];let r=0,l=0,s=0;for(const o of e.successes)if("web"===o.kind)o.skipped?s++:r++;else if("action"==o.kind)if(o.skipped)l++;else{let e=o.name;o.wrapping&&(e+=` (wrapping ${o.wrapping})`),n.push(e)}if(r>0){let o="";t?o=" to "+t:e.apihost&&(o=" to\n  https://"+nimbella_deployer_2.computeBucketDomainName(e.apihost,e.namespace)),i.log(`Deployed ${r} web content items${o}`)}if(s>0){let t="";o&&e.apihost&&(t=" on\n  https://"+nimbella_deployer_2.computeBucketDomainName(e.apihost,e.namespace)),i.log(`Skipped ${s} unchanged web resources${t}`)}if(n.length>0){i.log("Deployed actions:");for(const e of n)i.log("  - "+e)}if(l>0&&i.log(`Skipped ${l} unchanged actions`),e.failures.length>0){a=!1,i.displayError("Failures:");for(const o of e.failures){a=!1;const e=o.context;e&&i.displayError(`While deploying ${e}:`,o),i.displayError("",o)}}}return a}exports.ProjectDeploy=ProjectDeploy,ProjectDeploy.description="Deploy Nimbella projects",ProjectDeploy.flags=Object.assign({target:command_1.flags.string({description:"The target namespace"}),env:command_1.flags.string({description:"Path to environment file"}),apihost:command_1.flags.string({description:"API host to use"}),auth:command_1.flags.string({description:"OpenWhisk auth token to use"}),insecure:command_1.flags.boolean({description:"Ignore SSL Certificates",default:!1}),"verbose-build":command_1.flags.boolean({description:"Display build details"}),"verbose-zip":command_1.flags.boolean({description:"Display start/end of zipping phase for each action"}),production:command_1.flags.boolean({description:"Deploy to the production namespace instead of the test one"}),yarn:command_1.flags.boolean({description:"Use yarn instead of npm for node builds"}),"web-local":command_1.flags.string({description:"A local directory to receive web deploy, instead of uploading"}),include:command_1.flags.string({description:"Project portions to include"}),exclude:command_1.flags.string({description:"Project portions to exclude"}),incremental:command_1.flags.boolean({description:"Deploy only changes since last deploy"}),"anon-github":command_1.flags.boolean({description:"Attempt GitHub deploys anonymously"})},nimbella_deployer_1.NimBaseCommand.flags),ProjectDeploy.args=[{name:"projects",description:"One or more paths to projects"}],ProjectDeploy.strict=!1,exports.processCredentials=processCredentials,exports.doDeploy=doDeploy,exports.default=ProjectDeploy;
