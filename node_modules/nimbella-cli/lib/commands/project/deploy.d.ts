import { flags } from '@oclif/command';
import { NimBaseCommand, NimLogger } from 'nimbella-deployer';
import { Flags, OWOptions, Credentials } from 'nimbella-deployer';
export declare class ProjectDeploy extends NimBaseCommand {
    static description: string;
    static flags: {
        debug: flags.IOptionFlag<string>;
        verbose: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        target: flags.IOptionFlag<string>;
        env: flags.IOptionFlag<string>;
        apihost: flags.IOptionFlag<string>;
        auth: flags.IOptionFlag<string>;
        insecure: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'verbose-build': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'verbose-zip': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        production: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        yarn: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'web-local': flags.IOptionFlag<string>;
        include: flags.IOptionFlag<string>;
        exclude: flags.IOptionFlag<string>;
        incremental: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'anon-github': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    static args: {
        name: string;
        description: string;
    }[];
    static strict: boolean;
    runCommand(rawArgv: string[], argv: string[], args: any, flags: any, logger: NimLogger): Promise<void>;
}
export declare function processCredentials(ignore_certs: boolean, apihost: string | undefined, auth: string | undefined, target: string | undefined, logger: NimLogger): Promise<{
    creds: Credentials | undefined;
    owOptions: OWOptions;
}>;
export declare function doDeploy(project: string, cmdFlags: Flags, creds: Credentials | undefined, owOptions: OWOptions, watching: boolean, logger: NimLogger): Promise<boolean>;
export default ProjectDeploy;
