"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const nimbella_deployer_1=require("nimbella-deployer"),deploy_1=require("./deploy"),nimbella_deployer_2=require("nimbella-deployer"),fs=require("fs"),chokidar=require("chokidar"),path=require("path");class ProjectWatch extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,o,t,l,i){0==o.length&&this.doHelp(),nimbella_deployer_2.inBrowser&&i.handleError("'project watch' is designed for local development and will not work in the cloud");o.some(e=>nimbella_deployer_2.isGithubRef(e))&&!l["anon-github"]&&i.handleError("you don't have github authorization.  Use 'nim auth github --initial' to activate it.");const{target:r,env:a,apihost:n,auth:c,insecure:s,yarn:d,include:p,exclude:y}=l,u={verboseBuild:l["verbose-build"],verboseZip:l.verboseZip,production:!1,incremental:!0,env:a,yarn:d,webLocal:l["web-local"],include:p,exclude:y};this.debug("cmdFlags",u);const{creds:h,owOptions:f}=await deploy_1.processCredentials(s,n,c,r,i);o.forEach(e=>watch(e,u,h,f,i))}}function watch(e,o,t,l,i){const r=validateProject(e);r&&i.handleError(r,new Error(r)),i.log(`Watching '${e}' [use Control-C to terminate]`);let a=void 0;const n=async()=>{a&&await a.close()},c=()=>{a=chokidar.watch(e,{ignoreInitial:!0,followSymlinks:!1}),a.on("all",async(r,a)=>await fireDeploy(e,a,o,t,l,i,n,c,r))};c()}async function fireDeploy(e,o,t,l,i,r,a,n,c){if("addDir"===c)return;if(excluded(o))return;await a(),r.log(`\nDeploying '${e}' due to change in '${o}'`);let s=!1;const d=await deploy_1.doDeploy(e,t,l,i,!0,r).catch(e=>{r.displayError("",e),s=!0});!s&&d&&(r.log("Deployment complete.  Resuming watch.\n"),await delay().then(()=>n()))}function excluded(e){return e.split("/").includes(".nimbella")||e.endsWith("~")||e.includes("_tmp_")||e.endsWith(".swx")||e.includes(".#")}function validateProject(e){if(nimbella_deployer_2.isGithubRef(e))return`'${e}' is not in the local file system; we do not support watching github projects`;if(!fs.existsSync(e))return e+" does not exist";return fs.lstatSync(e).isDirectory()?isTypicalProject(e,"project.yml",!0)||isTypicalProject(e,"packages",!1)||isTypicalProject(e,"web",!1)?void 0:e+" is a directory but it doesn't appear to contain a project":e+" is not a directory"}function delay(){return new Promise((function(e){setTimeout(()=>e(void 0),200)}))}function isTypicalProject(e,o,t){if(o=path.join(e,o),fs.existsSync(o)){const e=fs.lstatSync(o);if(t&&e.isFile()||!t&&e.isDirectory())return!0}return!1}exports.default=ProjectWatch,ProjectWatch.description="Watch Nimbella projects, deploying incrementally on change",ProjectWatch.flags=Object.assign({target:deploy_1.ProjectDeploy.flags.target,env:deploy_1.ProjectDeploy.flags.env,apihost:deploy_1.ProjectDeploy.flags.apihost,auth:deploy_1.ProjectDeploy.flags.auth,insecure:deploy_1.ProjectDeploy.flags.insecure,"verbose-build":deploy_1.ProjectDeploy.flags["verbose-build"],"verbose-zip":deploy_1.ProjectDeploy.flags["verbose-zip"],yarn:deploy_1.ProjectDeploy.flags.yarn,"web-local":deploy_1.ProjectDeploy.flags["web-local"],include:deploy_1.ProjectDeploy.flags.include,exclude:deploy_1.ProjectDeploy.flags.exclude},nimbella_deployer_1.NimBaseCommand.flags),ProjectWatch.args=deploy_1.ProjectDeploy.args,ProjectWatch.strict=!1;
