"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer");class NamespaceFree extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,a,r,l,s){l.all&&a.length>0&&s.handleError("Cannot combine the '--all' flag with explicit namespace names");let i=nimbella_deployer_1.parseAPIHost(l.apihost);if(i&&0===a.length&&!l.all&&s.handleError("Cannot specify an API host without also specifying the namespace or the '--all' flag."),l.all)return this.freeAll(i,s);if(0===a.length){const e=await nimbella_deployer_2.getCredentials(nimbella_deployer_2.authPersister).catch(e=>s.handleError("",e));return await this.doFree(e.namespace,e.ow.apihost,s)}for(const e of a){const a=await nimbella_deployer_1.disambiguateNamespace(e,i).catch(e=>s.handleError("",e));await this.doFree(a,i,s)}}async freeAll(e,a){let r;if(e){r=(await nimbella_deployer_2.getCredentialDict(nimbella_deployer_2.authPersister))[e]}else r=await nimbella_deployer_2.getCredentialList(nimbella_deployer_2.authPersister);for(const e of r)await this.doFree(e.namespace,e.apihost,a)}async doFree(e,a,r){await nimbella_deployer_2.recordNamespaceOwnership(void 0,e,a,void 0,nimbella_deployer_2.authPersister)?r.log(`Removed ownership from namespace '${e}'`):r.handleError(`Namespace '${e}' was not found`)}}exports.default=NamespaceFree,NamespaceFree.description="Remove project ownership restrictions from namespaces",NamespaceFree.flags=Object.assign({apihost:command_1.flags.string({description:"API host serving the namespace(s)"}),all:command_1.flags.boolean({description:"free all namespaces (or, all on the given API host)"})},nimbella_deployer_1.NimBaseCommand.flags),NamespaceFree.args=[{name:"namespace",description:"The namespace(s) you are freeing (current if omitted)",required:!1}],NamespaceFree.strict=!1;
