"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const command_1=require("@oclif/command"),nimbella_deployer_1=require("nimbella-deployer"),nimbella_deployer_2=require("nimbella-deployer"),key_value_1=require("../../storage/key-value"),queryCommand="redis/getMany";class GetMany extends nimbella_deployer_1.NimBaseCommand{async runCommand(e,a,r,o,t){await key_value_1.queryKVStore(queryCommand,r,o,nimbella_deployer_2.authPersister).then(e=>{e.value.forEach(e=>{t.log(e)})}).catch(e=>{var a,r,o;return t.handleError((null===(o=null===(r=null===(a=e.error)||void 0===a?void 0:a.response)||void 0===r?void 0:r.result)||void 0===o?void 0:o.error)||e.message)})}}exports.default=GetMany,GetMany.description="Gets values for given Keys",GetMany.flags=Object.assign({apihost:command_1.flags.string({description:"API host of the namespace to list keys from"})},nimbella_deployer_1.NimBaseCommand.flags),GetMany.args=[{name:"keyPrefix",description:"The key for which value is to be retrieved"},{name:"startIndex",description:"The index to start at"},{name:"count",description:"The count to run to from start"}],GetMany.aliases=["kv:getMany","kv:getmany"];
