#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.run=void 0;const nimbella_deployer_1=require("nimbella-deployer"),errors_1=require("@oclif/errors");async function run(){const e=require("../package.json"),s=e.oclif.topics,r=Object.keys(s),i="nimbella-cli/"+e.version;nimbella_deployer_1.initializeAPI(i),decolonize(s),applyTopicAliases(s),colonize(r);try{await require("@oclif/command").run(void 0,__dirname)}catch(e){throw e.message&&!e.oclif&&(e=new errors_1.CLIError(e.message,{exit:1})),e}}function applyTopicAliases(e){const s=process.argv[2];for(const r in e){const i=e[r];if(i.aliases&&i.aliases.includes(s))return void(process.argv[2]=r)}}function decolonize(e){let s=process.argv.slice(0,2);const r=process.argv.slice(2),i=[];for(const s of r)if(i.length<2&&!isFlag(s)){const r=s.split(":");isTopicOrAlias(r[0],e)?i.push(...r):i.push(s)}else i.push(s);process.argv=s.concat(i)}function isTopicOrAlias(e,s){for(const r in s){if(e==r)return!0;const i=s[r];if(i.aliases&&i.aliases.includes(e))return!0}return!1}function isFlag(e){return e.startsWith("-")}function colonize(e){const s=process.argv;let r=2;for(;r<s.length&&(isFlag(s[r])||"help"===s[r]);)r++;if(r>s.length-2||isFlag(s[r+1])||"help"===s[r])return;if(!e.includes(s[r]))return;const i=s[r]+":"+s[r+1],o=s.slice(0,r),n=s.slice(r+2);process.argv=o.concat([i]).concat(n)}exports.run=run;
