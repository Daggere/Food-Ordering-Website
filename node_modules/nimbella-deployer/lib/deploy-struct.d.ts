/// <reference types="node" />
import { Dict, Client, Limits, KeyVal as OWKeyVal } from 'openwhisk';
import { Bucket } from '@google-cloud/storage';
export interface WebResource {
    simpleName: string;
    filePath?: string;
    mimeType?: string;
    build?: string;
}
export interface PackageSpec {
    name: string;
    actions?: ActionSpec[];
    shared: boolean;
    annotations?: Dict;
    parameters?: Dict;
    environment?: Dict;
    clean?: boolean;
    web?: any;
}
export interface ActionSpec {
    name: string;
    file?: string;
    displayFile?: string;
    code?: string;
    runtime?: string;
    main?: string;
    binary?: boolean;
    zipped?: boolean;
    web?: any;
    webSecure?: any;
    annotations?: Dict;
    parameters?: Dict;
    environment?: Dict;
    limits?: Limits;
    clean?: boolean;
    build?: string;
    wrapping?: string;
}
export interface Flags {
    verboseBuild: boolean;
    verboseZip: boolean;
    production: boolean;
    incremental: boolean;
    yarn: boolean;
    env: string | undefined;
    webLocal: string | undefined;
    include: string | undefined;
    exclude: string | undefined;
}
export interface BuildStatus {
    pending: ((arg0: Error) => void)[];
    built: boolean;
    error: Error;
}
export interface BuildTable {
    [key: string]: BuildStatus;
}
export interface Feedback {
    warn(message?: any, ...optionalParams: any[]): void;
    progress(message?: any, ...optionalParams: any[]): void;
}
export declare class DefaultFeedback implements Feedback {
    warn(message?: any, ...optionalParams: any[]): void;
    progress(message?: any, ...optionalParams: any[]): void;
}
export interface DeployStructure {
    web?: WebResource[];
    packages?: PackageSpec[];
    targetNamespace?: string | Ownership;
    cleanNamespace?: boolean;
    bucket?: BucketSpec;
    actionWrapPackage?: string;
    parameters?: Dict;
    environment?: Dict;
    credentials?: Credentials;
    flags?: Flags;
    webBuild?: string;
    sharedBuilds?: BuildTable;
    strays?: string[];
    filePath?: string;
    githubPath?: string;
    owClient?: Client;
    bucketClient?: Bucket;
    includer?: Includer;
    reader?: ProjectReader;
    versions?: VersionEntry;
    feedback?: Feedback;
    error?: Error;
}
export interface Ownership {
    test?: string;
    production?: string;
}
export interface BucketSpec {
    prefixPath?: string;
    strip?: number;
    mainPageSuffix?: string;
    notFoundPage?: string;
    clean?: boolean;
    useCache?: boolean;
}
export interface VersionInfo {
    version: string;
    digest: string;
}
export interface VersionMap {
    [key: string]: VersionInfo;
}
export declare type DeployKind = 'web' | 'action';
export interface DeploySuccess {
    name: string;
    kind: DeployKind;
    skipped: boolean;
    wrapping?: string;
}
export interface DeployResponse {
    successes: DeploySuccess[];
    failures: Error[];
    ignored: string[];
    namespace: string;
    packageVersions: VersionMap;
    actionVersions: VersionMap;
    apihost?: string;
    webHashes?: {
        [key: string]: string;
    };
}
export interface VersionEntry {
    apihost: string;
    namespace: string;
    packageVersions: VersionMap;
    actionVersions: VersionMap;
    webHashes: {
        [key: string]: string;
    };
}
export interface DeployerAnnotation {
    repository?: string;
    commit?: string;
    digest: string;
    projectPath: string;
    user: string;
    zipped?: boolean;
}
export interface OWOptions {
    apihost?: string;
    api_key?: string;
    ignore_certs?: boolean;
}
export declare type IdProvider = {
    provider: string;
    name: string;
    key: string;
};
export declare type FullCredentials = {
    status: string;
    apihost: string;
    namespace: string;
    uuid: string;
    key: string;
    redis: boolean;
    storage?: string;
    externalId?: IdProvider;
};
export interface CredentialStore {
    currentHost: string;
    currentNamespace: string;
    credentials: CredentialHostMap;
    currentGithub?: string;
    github?: {
        [key: string]: string;
    };
    currentPostman?: string;
    postman?: {
        [key: string]: string;
    };
}
export interface CredentialHostMap {
    [key: string]: CredentialNSMap;
}
export interface CredentialNSMap {
    [key: string]: CredentialEntry;
}
export interface CredentialEntry {
    api_key: string;
    storageKey: CredentialStorageEntry;
    redis: boolean;
    project?: string;
    production?: boolean;
    commander?: Record<string, unknown>;
}
export interface CredentialStorageEntry {
    project_id: string;
    credentials: {
        client_email: string;
        private_key: string;
    };
}
export interface Credentials {
    namespace: string | undefined;
    ow: OWOptions;
    storageKey: CredentialStorageEntry | undefined;
    redis: boolean;
    project?: string;
    production?: boolean;
    commander?: Record<string, unknown>;
}
export interface CredentialRow {
    namespace: string;
    current: boolean;
    storage: boolean;
    redis: boolean;
    project?: string;
    production?: boolean;
    apihost: string;
}
export interface Includer {
    isWebIncluded: boolean;
    isPackageIncluded: (pkg: string) => boolean;
    isActionIncluded: (pkg: string, action: string) => boolean;
    isIncludingEverything: () => boolean;
}
export declare type PathKind = {
    name: string;
    isDirectory: boolean;
    isFile: boolean;
    mode: number;
};
export interface ProjectReader {
    readdir: (path: string) => Promise<PathKind[]>;
    readFileContents: (path: string) => Promise<Buffer>;
    isExistingFile: (path: string) => Promise<boolean>;
    getPathKind: (path: string) => Promise<PathKind>;
    getFSLocation: () => string | null;
}
export interface KeyVal extends OWKeyVal {
    init?: boolean;
}
