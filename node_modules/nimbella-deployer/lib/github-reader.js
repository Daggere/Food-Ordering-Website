"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeGithubReader=void 0;const github_1=require("./github"),PathPkg=require("path"),makeDebug=require("debug"),debug=makeDebug("nim:deployer:github-reader"),Path=PathPkg.posix||PathPkg;function makeGithubReader(e,t){const i=github_1.makeClient(e,t);return new GithubProjectReader(i,e)}exports.makeGithubReader=makeGithubReader;class GithubProjectReader{constructor(e,t){debug("new github-reader for %O",t),this.client=e,this.def=t,this.cache=new Map}getFSLocation(){return null}async readdir(e){if(e=this.fixPathArgument(e),debug("reading directory %s",e),Path.isAbsolute(e))throw new Error("Deploying from GitHub does not support absolute paths");const t=await this.retrieve(e);if(!Array.isArray(t))throw debug("improper contents: %O",t),new Error(`Path '${e} should be a directory but is not`);if(e===this.def.path&&!github_1.seemsToBeProject(t))throw new Error("GitHub location does not contain a 'nim' project");return t.map(this.toPathKind)}toPathKind(e){let t=438;return"file"===e.type&&(e.name.endsWith(".sh")||e.name.endsWith(".cmd"))&&(t=511),{name:e.name,isDirectory:"dir"===e.type,isFile:"file"===e.type,mode:t}}async readFileContents(e){e=this.fixPathArgument(e),debug("reading file %s",e);const t=await this.retrieve(e);if("string"!=typeof t.content||!t.encoding)throw debug("improper contents: %O",t),new Error(`Contents of file at '${e}' was not interpretable`);return Buffer.from(t.content,t.encoding)}async isExistingFile(e){debug("checking file existence: %s",e);const t=await this.getPathKind(e);return t&&t.isFile}async getPathKind(e){if(e=this.fixPathArgument(e),debug("getting path type: %s",e),""===e||"/"===e||void 0===e)return{name:"",isFile:!1,isDirectory:!0,mode:1911};const t=Path.basename(e),i=Path.dirname(e),r=await this.readdir(i);for(const e of r)if(e.name===t)return e;return Promise.resolve(void 0)}async retrieve(e){const t=Path.normalize(Path.join(this.def.path,e));let i=this.cache.get(t);return i?debug("'%s' found in cache",e):(debug("going to github for '%s'",e),i=await github_1.readContents(this.client,this.def,t),this.cache.set(t,i)),i}fixPathArgument(e){return e?e.split("\\").join("/"):e}}
