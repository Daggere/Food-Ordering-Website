"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeFileReader=void 0;const fs=require("fs"),Path=require("path"),util_1=require("util"),makeDebug=require("debug"),debug=makeDebug("nim:deployer:file-reader");let fs_readdir,fs_readfile,fs_lstat,fs_realpath;function makeFileReader(e){return debug("making file reader on basepath '%s'",e),fs_readdir=util_1.promisify(fs.readdir),fs_readfile=util_1.promisify(fs.readFile),fs_lstat=util_1.promisify(fs.lstat),fs_realpath=util_1.promisify(fs.realpath),new FileProjectReader(e)}exports.makeFileReader=makeFileReader;class FileProjectReader{constructor(e){this.basepath=e}getFSLocation(){return this.basepath}async readdir(e){debug("request to read directory '%s'",e),e=Path.resolve(this.basepath,e),e=await fs_realpath(e),debug("resolved to directory '%s",e);const t=(await fs_readdir(e,{withFileTypes:!0})).map(async t=>{let s,i;if(t.isSymbolicLink()){const a=await fs_realpath(Path.resolve(e,t.name)),r=await fs_lstat(a);s=r.isFile(),i=r.isDirectory()}else s=t.isFile(),i=t.isDirectory();return{name:t.name,isDirectory:i,isFile:s,mode:438}});return Promise.all(t)}async readFileContents(e){return e=Path.resolve(this.basepath,e),e=await fs_realpath(e),fs_readfile(e)}isExistingFile(e){return debug("testing existence for file '%s'",e),e=Path.resolve(this.basepath,e),debug("resolved to file '%s",e),fs_lstat(e).then(e=>e.isFile()?(debug("file exists"),!0):(debug("path exists but is not a file"),!1)).catch(()=>(debug("lstat failed for path %s",e),!1))}getPathKind(e){return e=Path.resolve(this.basepath,e),fs_lstat(e).then(t=>({name:Path.basename(e),isFile:t.isFile(),isDirectory:t.isDirectory(),mode:t.mode})).catch(()=>{})}}
