import { DeployStructure, DeployResponse, DeployKind, ActionSpec, PackageSpec, Feedback, DeployerAnnotation, WebResource, VersionMap, VersionEntry, PathKind, ProjectReader, KeyVal } from './deploy-struct';
import * as openwhisk from 'openwhisk';
export declare const FILES_TO_SKIP: string[];
export declare const inBrowser: boolean;
export declare function loadProjectConfig(configFile: string, envPath: string, filePath: string, reader: ProjectReader, feedback: Feedback): Promise<DeployStructure>;
export declare function needsBuilding(todeploy: DeployStructure): boolean;
export declare function validateDeployConfig(arg: any): string;
export declare function keyVal(from: openwhisk.Dict): KeyVal[];
export declare function makeDict(keyVal: KeyVal[]): openwhisk.Dict;
export declare function emptyStructure(): DeployStructure;
export declare function errorStructure(err: Error): DeployStructure;
export declare function emptyResponse(): DeployResponse;
export declare function combineResponses(responses: DeployResponse[]): DeployResponse;
export declare function straysToResponse(strays: string[]): DeployResponse;
export declare function wrapSuccess(name: string, kind: DeployKind, skipped: boolean, wrapping: string, actionVersions: VersionMap, namespace: string): DeployResponse;
export declare function wrapError(err: any, context: string): DeployResponse;
export declare function isTargetNamespaceValid(client: openwhisk.Client, namespace: string): Promise<boolean>;
export declare function getTargetNamespace(client: openwhisk.Client): Promise<string>;
export declare function actionFileToParts(fileName: string): {
    name: string;
    binary: boolean;
    zipped: boolean;
    runtime: string;
};
declare type ExtensionDetail = {
    binary: boolean;
};
declare type ExtensionEntry = {
    [key: string]: ExtensionDetail;
};
export declare type RuntimeEntry = {
    kind: string;
    default: boolean;
    extensions: ExtensionEntry;
};
export declare type RuntimeTable = {
    [key: string]: RuntimeEntry[];
};
export declare function extFromRuntime(runtime: string, binary: boolean): string;
export declare function filterFiles(entries: PathKind[]): PathKind[];
export declare function promiseFilesAndFilterFiles(root: string, reader: ProjectReader): Promise<string[]>;
export declare function substituteFromEnvAndFiles(input: string, envPath: string, projectPath: string, feedback: Feedback): string;
export declare function convertToResources(names: string[], dropInitial: number): WebResource[];
export declare function convertPairsToResources(pairs: string[][]): WebResource[];
export interface PackageMap {
    [key: string]: PackageSpec;
}
export interface ActionMap {
    [key: string]: ActionSpec;
}
export declare function mapPackages(packages: PackageSpec[]): PackageMap;
export declare function mapActions(actions: ActionSpec[]): ActionMap;
export declare function getBestProjectName(project: DeployStructure): Promise<string>;
export declare function getDeployerAnnotation(project: string, githubPath: string): Promise<DeployerAnnotation>;
export declare function wipe(client: openwhisk.Client): Promise<void>;
export declare function generateSecret(): string;
export declare function saveUsFromOurselves(namespace: string, apihost: string): boolean;
export declare function digestPackage(pkg: PackageSpec): string;
export declare function digestAction(action: ActionSpec, code: string): string;
export declare function writeProjectStatus(project: string, results: DeployResponse, replace: boolean): string;
export declare function loadVersions(projectPath: string, namespace: string, apihost: string): VersionEntry;
export declare function wskRequest(url: string, auth?: string): Promise<any>;
export {};
