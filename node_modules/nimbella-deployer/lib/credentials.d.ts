import { CredentialStore, Credentials, CredentialRow, Feedback } from './deploy-struct';
export declare function nimbellaDir(): string;
export interface Persister {
    loadCredentialStoreIfPresent: () => CredentialStore;
    loadCredentialStore: () => Promise<CredentialStore>;
    saveCredentialStore: (store: CredentialStore) => void;
    saveLegacyInfo: (apihost: string, auth: string) => void;
}
export declare const fileSystemPersister: Persister;
export declare const browserPersister: Persister;
export declare let authPersister: Persister;
export declare function setInBrowser(): void;
export declare function addCredential(store: CredentialStore, apihost: string, namespace: string, api_key: string, storage: string, redis: boolean): Credentials;
export declare function forgetNamespace(namespace: string, apihost: string | undefined, persister: Persister, feedback: Feedback): Promise<Credentials>;
export declare function switchNamespace(namespace: string, apihost: string | undefined, persister: Persister): Promise<Credentials>;
export declare function getCredentialsForNamespace(namespace: string, apihost: string | undefined, persister: Persister): Promise<Credentials>;
export declare function getCredentials(persister: Persister): Promise<Credentials>;
export declare function addCredentialAndSave(apihost: string, auth: string, storage: string, redis: boolean, persister: Persister, namespace: string, allowReplacement: boolean): Promise<Credentials>;
export declare function recordNamespaceOwnership(project: string, namespace: string, apihost: string, production: boolean, persister: Persister): Promise<boolean>;
export declare function getCredentialDict(persister: Persister): Promise<{
    [host: string]: CredentialRow[];
}>;
export declare function getApiHosts(persister: Persister): Promise<string[]>;
export declare function getCredentialList(persister: Persister): Promise<CredentialRow[]>;
export declare function getNamespace(host: string, auth: string): Promise<string>;
export declare function getCurrentNamespace(persister: Persister): Promise<string | undefined>;
export declare function addCommanderData(apihost: string, namespace: string, data: Record<string, unknown>, persister: Persister): Promise<boolean>;
export declare function getGithubAccounts(persister: Persister): Promise<{
    [key: string]: string;
}>;
declare type DeleteResult = 'DeletedOk' | 'DeletedDangling' | 'NotExists';
export declare function deleteGithubAccount(name: string, persister: Persister): Promise<DeleteResult>;
export declare function getGithubAuth(persister: Persister): string;
export declare function switchGithubAccount(name: string, persister: Persister): Promise<boolean>;
export declare function addGithubAccount(name: string, token: string, persister: Persister): Promise<void>;
export declare function getPostmanKeys(persister: Persister): Promise<{
    [key: string]: string;
}>;
export declare function getPostmanCurrentKey(persister: Persister): Promise<string | undefined>;
export declare function deletePostmanKey(name: string, persister: Persister): Promise<DeleteResult>;
export declare function switchPostmanKey(name: string, persister: Persister): Promise<boolean>;
export declare function addPostmanKey(name: string, token: string, persister: Persister): Promise<void>;
export {};
