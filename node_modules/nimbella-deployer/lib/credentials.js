"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.addPostmanKey=exports.switchPostmanKey=exports.deletePostmanKey=exports.getPostmanCurrentKey=exports.getPostmanKeys=exports.addGithubAccount=exports.switchGithubAccount=exports.getGithubAuth=exports.deleteGithubAccount=exports.getGithubAccounts=exports.addCommanderData=exports.getCurrentNamespace=exports.getNamespace=exports.getCredentialList=exports.getApiHosts=exports.getCredentialDict=exports.recordNamespaceOwnership=exports.addCredentialAndSave=exports.getCredentials=exports.getCredentialsForNamespace=exports.switchNamespace=exports.forgetNamespace=exports.addCredential=exports.setInBrowser=exports.authPersister=exports.browserPersister=exports.fileSystemPersister=exports.nimbellaDir=void 0;const fs=require("fs"),path=require("path"),createDebug=require("debug"),util_1=require("./util"),debug=createDebug("nimbella.cli"),CREDENTIAL_STORE_KEY="wb.credential-store",HOME=process.env["win32"===process.platform?"USERPROFILE":"HOME"],NAMESPACE_URL_PATH="/api/v1/namespaces",NIMBELLA_DIR=".nimbella",WSK_PROPS="wskprops",CREDENTIAL_STORE="credentials.json";function nimbellaDir(){const e=process.env.NIMBELLA_DIR;return e&&e.length>0?e:path.join(HOME,".nimbella")}function wskProps(){return path.join(nimbellaDir(),WSK_PROPS)}function credentialStore(){return path.join(nimbellaDir(),CREDENTIAL_STORE)}function setInBrowser(){exports.authPersister=exports.browserPersister}function addCredential(e,t,r,n,a,o){debug("Adding credential to credential store");let s=e.credentials[t];s||(s={},e.credentials[t]=s);const i=a?parseStorageString(a,r):void 0;return s[r]={api_key:n,storageKey:i,redis:o},e.currentHost=t,e.currentNamespace=r,{namespace:r,ow:{apihost:t,api_key:n},storageKey:i,redis:o}}async function forgetNamespace(e,t,r,n){const a=await r.loadCredentialStore(),o=getUniqueCredentials(e,t,a),s=t||o.ow.apihost,i=a.credentials[s];let c=!1;if(i&&i[e]){if(delete i[e],s===a.currentHost&&a.currentNamespace===e){a.currentNamespace=void 0,c=!0;try{fs.unlinkSync(wskProps())}catch(e){}}r.saveCredentialStore(a),c&&(n.warn(`'${e}' was the current namespace`),n.warn("A new namespace target must be specified on or before the next project deployment"))}else n.warn(`There is no credential entry for namespace '${e}' on API host '${s}'`);return o}async function switchNamespace(e,t,r){const n=await r.loadCredentialStore(),a=getUniqueCredentials(e,t,n),o=a.ow.apihost;return n.currentHost===o&&n.currentNamespace===e?(debug("not an actual change"),a):(n.currentHost=o,n.currentNamespace=e,r.saveCredentialStore(n),r.saveLegacyInfo(o,a.ow.api_key),debug(`Switched target namespace to '${e}' on API host '${o}'`),a)}async function getCredentialsForNamespace(e,t,r){return getUniqueCredentials(e,t,await r.loadCredentialStore())}async function getCredentials(e){const t=await e.loadCredentialStore();if(!t.currentHost||!t.currentNamespace)throw new Error("You do not have a current namespace.  Use 'nim auth login' to create a new one or 'nim auth switch' to use an existing one");const r=t.credentials[t.currentHost][t.currentNamespace],{storageKey:n,api_key:a,redis:o,project:s,production:i,commander:c}=r;return{namespace:t.currentNamespace,ow:{apihost:t.currentHost,api_key:a},storageKey:n,redis:o,project:s,production:i,commander:c}}async function addCredentialAndSave(e,t,r,n,a,o,s){const i=await a.loadCredentialStore();return(o?Promise.resolve(o):getNamespace(e,t)).then(o=>{if(!s&&wouldReplace(i,e,o,t))throw new Error(`Existing credentials for namespace '${o}' cannot be replaced using '--auth'.  To replace it, logout first, or login without '--auth'`);const c=addCredential(i,e,o,t,r,n);return a.saveCredentialStore(i),c})}async function recordNamespaceOwnership(e,t,r,n,a){const o=await a.loadCredentialStore();if(!r){r=getUniqueCredentials(t,void 0,o).ow.apihost}const s=o.credentials[r];return!(!s||!s[t])&&(s[t].project=e,s[t].production=n,a.saveCredentialStore(o),!0)}async function getCredentialDict(e){const t=await e.loadCredentialStore(),r={};for(const e in t.credentials){let n=[];for(const r in t.credentials[e]){const a=e===t.currentHost&&r===t.currentNamespace,o=!!t.credentials[e][r].storageKey,{redis:s,project:i,production:c}=t.credentials[e][r];n.push({namespace:r,current:a,storage:o,apihost:e,redis:s,project:i,production:c}),n=n.sort((e,t)=>e.namespace.localeCompare(t.namespace))}r[e]=n}return r}async function getApiHosts(e){const t=await e.loadCredentialStore();return Object.keys(t.credentials)}async function getCredentialList(e){const t=await getCredentialDict(e);return Object.values(t).reduce((e,t)=>e.concat(t),[])}function getNamespace(e,t){debug("getting current namespace");const r=e+NAMESPACE_URL_PATH;return util_1.wskRequest(r,t).then(e=>e[0])}async function getCurrentNamespace(e){debug("getting current namespace");return(await e.loadCredentialStore()).currentNamespace}function saveCredentialStore(e){const t=JSON.stringify(e,null,2);debug("writing credential store"),fs.writeFileSync(credentialStore(),t)}function saveLegacyInfo(e,t){saveWskProps(e,t),debug("stored .wskprops with API host %s",e)}function loadCredentialStore(){if(!fs.existsSync(credentialStore()))return Promise.resolve(initialCredentialStore());const e=fs.readFileSync(credentialStore());return Promise.resolve(JSON.parse(String(e)))}function loadCredentialStoreIfPresent(){if(!fs.existsSync(credentialStore()))return;const e=fs.readFileSync(credentialStore());return JSON.parse(String(e))}function browserLoadCredentialStoreIfPresent(){const e=window.localStorage.getItem(CREDENTIAL_STORE_KEY);if(e&&""!==e)return JSON.parse(e);{const e=window.location.origin,t=void 0,r={};return r[e]={},{currentHost:e,currentNamespace:t,credentials:r}}}function browserLoadCredentialStore(){return Promise.resolve(browserLoadCredentialStoreIfPresent())}function browserSaveCredentialStore(e){const t=JSON.stringify(e);window.localStorage.setItem(CREDENTIAL_STORE_KEY,t)}function browserSaveLegacyInfo(e,t){}function initialCredentialStore(){return fs.existsSync(nimbellaDir())||fs.mkdirSync(nimbellaDir()),{currentHost:void 0,currentNamespace:void 0,credentials:{}}}function wouldReplace(e,t,r,n){const a=e.credentials[t]?e.credentials[t][r]:void 0;return!(!a||!a.storageKey&&!a.redis)&&n===a.api_key}function saveWskProps(e,t){const r=`APIHOST=${e}\nAUTH=${t}\n`;fs.writeFileSync(wskProps(),r)}function getUniqueCredentials(e,t,r){const n={};let a,o;for(const t in r.credentials){const a=r.credentials[t][e];a&&(n[t]=a)}if(t){if(!n[t])throw new Error(`No credentials found for namespace '${e}' on API host '${t}'`);a=n[t],o=t}else{const t=Object.entries(n);if(1!==t.length)throw 0===t.length?new Error(`No credentials found for namespace '${e}' on any API host`):new Error(`The namespace '${e}' exists on more than one API host.  An '--apihost' argument is required`);[o,a]=t[0]}const{storageKey:s,api_key:i,redis:c,project:d,production:u,commander:l}=a;return debug("have authkey: %s",i),{namespace:e,ow:{apihost:o,api_key:i},storageKey:s,redis:c,project:d,production:u,commander:l}}function parseStorageString(e,t){let r;try{r=JSON.parse(e)}catch(e){throw new Error(`Corrupt storage string for namespace '${t}'`)}const{client_email:n,project_id:a,private_key:o}=r;return{project_id:a,credentials:{client_email:n,private_key:o}}}async function addCommanderData(e,t,r,n){const a=await n.loadCredentialStore(),o=a.credentials[e];return!(!o||!o[t])&&(o[t].commander=r,n.saveCredentialStore(a),!0)}async function getGithubAccounts(e){const t=await e.loadCredentialStore();return debug("GitHub accounts requested, returning %O",t.github),t.github||{}}async function deleteGithubAccount(e,t){const r=await t.loadCredentialStore();return r.github&&r.github[e]?(delete r.github[e],e===r.currentGithub&&(r.currentGithub=void 0),debug("GitHub deletion of account %s succeeded, with currentGithub=%s",e,r.currentGithub),t.saveCredentialStore(r),r.currentGithub?"DeletedOk":"DeletedDangling"):"NotExists"}function getGithubAuth(e){const t=e.loadCredentialStoreIfPresent();if(t&&t.github&&t.currentGithub)return t.github[t.currentGithub]}async function switchGithubAccount(e,t){const r=await t.loadCredentialStore();return!(!r.github||!r.github[e])&&(r.currentGithub=e,t.saveCredentialStore(r),!0)}async function addGithubAccount(e,t,r){const n=await r.loadCredentialStore();n.github||(n.github={}),debug("adding github account with name %s and token %s",e,t),n.github[e]=t,n.currentGithub=e,r.saveCredentialStore(n)}async function getPostmanKeys(e){const t=await e.loadCredentialStore();return debug("Postman keys requested, returning %O",t.postman),t.postman||{}}async function getPostmanCurrentKey(e){const t=await e.loadCredentialStore();return debug("Postman current key requested, returning %O",t.currentPostman),t.currentPostman}async function deletePostmanKey(e,t){const r=await t.loadCredentialStore();return r.postman&&r.postman[e]?(delete r.postman[e],e===r.currentPostman&&(r.currentPostman=void 0),debug("Postman deletion of key %s succeeded, with currentPostman=%s",e,r.currentPostman),t.saveCredentialStore(r),r.currentPostman?"DeletedOk":"DeletedDangling"):"NotExists"}async function switchPostmanKey(e,t){const r=await t.loadCredentialStore();return!(!r.postman||!r.postman[e])&&(r.currentPostman=e,t.saveCredentialStore(r),!0)}async function addPostmanKey(e,t,r){const n=await r.loadCredentialStore();n.postman||(n.postman={}),debug("adding postman key with name %s and token %s",e,t),n.postman[e]=t,n.currentPostman=e,r.saveCredentialStore(n)}exports.nimbellaDir=nimbellaDir,exports.fileSystemPersister={loadCredentialStoreIfPresent:loadCredentialStoreIfPresent,loadCredentialStore:loadCredentialStore,saveCredentialStore:saveCredentialStore,saveLegacyInfo:saveLegacyInfo},exports.browserPersister={loadCredentialStoreIfPresent:browserLoadCredentialStoreIfPresent,loadCredentialStore:browserLoadCredentialStore,saveCredentialStore:browserSaveCredentialStore,saveLegacyInfo:browserSaveLegacyInfo},exports.authPersister=util_1.inBrowser?exports.browserPersister:exports.fileSystemPersister,exports.setInBrowser=setInBrowser,exports.addCredential=addCredential,exports.forgetNamespace=forgetNamespace,exports.switchNamespace=switchNamespace,exports.getCredentialsForNamespace=getCredentialsForNamespace,exports.getCredentials=getCredentials,exports.addCredentialAndSave=addCredentialAndSave,exports.recordNamespaceOwnership=recordNamespaceOwnership,exports.getCredentialDict=getCredentialDict,exports.getApiHosts=getApiHosts,exports.getCredentialList=getCredentialList,exports.getNamespace=getNamespace,exports.getCurrentNamespace=getCurrentNamespace,exports.addCommanderData=addCommanderData,exports.getGithubAccounts=getGithubAccounts,exports.deleteGithubAccount=deleteGithubAccount,exports.getGithubAuth=getGithubAuth,exports.switchGithubAccount=switchGithubAccount,exports.addGithubAccount=addGithubAccount,exports.getPostmanKeys=getPostmanKeys,exports.getPostmanCurrentKey=getPostmanCurrentKey,exports.deletePostmanKey=deletePostmanKey,exports.switchPostmanKey=switchPostmanKey,exports.addPostmanKey=addPostmanKey;
