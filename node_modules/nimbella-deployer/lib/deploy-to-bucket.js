"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.restore404Page=exports.cleanBucket=exports.computeBucketDomainName=exports.computeBucketStorageName=exports.deployToBucket=exports.openBucketClient=void 0;const storage_1=require("@google-cloud/storage"),util_1=require("./util"),axios_1=require("axios"),openwhisk=require("openwhisk"),path=require("path"),fs=require("fs"),crypto=require("crypto"),URL=require("url-parse"),makeDebug=require("debug"),debug=makeDebug("nim:deployer:deploy-to-bucket");async function openBucketClient(e,t){debug("bucket client open");const a=computeBucketStorageName(e.ow.apihost,e.namespace);debug("computed bucket name %s",a);const o=await makeClient(a,e.storageKey);return await addWebMeta(o,t),o}function addWebMeta(e,t){let a="index.html",o="404.html";t&&(t.mainPageSuffix&&(a=t.mainPageSuffix),t.notFoundPage&&(o=t.notFoundPage)),debug("Setting mainPageSuffix to %s and notFoundPage to %s",a,o);const s={mainPageSuffix:a,notFoundPage:o};return e.setMetadata({website:s}).then(()=>e)}async function makeClient(e,t){debug("entered makeClient");const a=new storage_1.Storage(t);return debug("made Storage handle"),a.bucket(e)}async function deployToBucket(e,t,a,o,s,r){const n=await s.readFileContents(e.filePath),i=crypto.createHash("sha256");i.update(n);const u=String(i.digest("hex"));if(o&&o.webHashes&&o.webHashes[e.filePath]&&o.webHashes[e.filePath]===u){const t={};t[e.filePath]=o.webHashes[e.filePath];const a={successes:[{name:e.filePath,kind:"web",skipped:!0}],failures:[],ignored:[],actionVersions:{},packageVersions:{},webHashes:t,namespace:void 0};return Promise.resolve(a)}let c=e.simpleName;if(a&&a.strip){let e=c.split(path.sep);e.length>a.strip&&(e=e.slice(a.strip),c=e.join(path.sep))}c=a&&a.prefixPath?path.join(a.prefixPath,c):c,debug("original destination: %s",c),c=c.replace(/\\/g,"/"),debug("fixed up destination: %s",c);const l={contentType:e.mimeType};a&&a.useCache||(l.cacheControl="no-cache"),debug("bucket save operation for %s with data of length %d and metadata %O",e.simpleName,n.length,l);const p=[];try{await doUpload(r,t,c,n,l,p),debug("save operation for %s was successful",e.simpleName)}catch(t){return debug("an error occurred: %O",t),util_1.wrapError(t,`web resource '${e.simpleName}' (${p[0]})`)}const d=`https://${t.name}/${c}`,g=util_1.wrapSuccess(d,"web",!1,void 0,{},void 0);return g.webHashes={},g.webHashes[e.filePath]=u,debug("returning response %O",g),g}async function doUpload(e,t,a,o,s,r){if(util_1.inBrowser){r[0]="getting signed URL";const n=openwhisk(e),i=await n.actions.invoke({name:"/nimbella/websupport/getSignedUrl",params:{fileName:a},blocking:!0,result:!0});r[0]="putting data to signed URL";const u=i.url;if(!u)throw new Error("Response from getSignedUrl was not a URL: "+i);if(200!==(await axios_1.default.put(u,o)).status)throw new Error("Bad response [$putres.status}] from storage server");debug("signed URL put operation for %s was successful",a),r[0]="setting metadata";const c=t.file(a);await c.setMetadata(s),debug("metadata saving operation for %s was successful",a)}else{r[0]="uploading file";const e=t.file(a);await e.save(o,{metadata:s})}}function computeBucketStorageName(e,t){return computeBucketDomainName(e,t).split(".").join("-")}function computeBucketDomainName(e,t){return t+"-"+URL(e).hostname}async function cleanBucket(e,t,a){let o=t?t.prefixPath:void 0;o&&!o.endsWith("/")&&(o+="/"),debug("Cleaning up old web content");const s=o?{force:!0,prefix:o}:{force:!0};return await e.deleteFiles(s).catch(()=>Promise.resolve("Note: one or more old web resources could not be deleted")),o?"":restore404Page(e,a)}async function restore404Page(e,t){let a;if(util_1.inBrowser)a=require("../404.html").default;else{const e=require.resolve("../404.html");a=fs.readFileSync(e)}const o=[];try{return await doUpload(t,e,"404.html",a,{contentType:"text/html"},o),""}catch(e){return debug(`while ${o[0]}, got error ${e}`),"Standard 404.html page could not be restored"}}exports.openBucketClient=openBucketClient,exports.deployToBucket=deployToBucket,exports.computeBucketStorageName=computeBucketStorageName,exports.computeBucketDomainName=computeBucketDomainName,exports.cleanBucket=cleanBucket,exports.restore404Page=restore404Page;
