import { Command, flags } from '@oclif/command';
import { IConfig } from '@oclif/config';
import { IArg } from '@oclif/parser/lib/args';
import { Feedback } from './deploy-struct';
export declare function setHelpHelper(helper: (usage: Record<string, any>) => never): void;
export interface NimLogger {
    log: (msg: string, ...args: any[]) => void;
    handleError: (msg: string, err?: Error) => never;
    exit: (code: number) => void;
    displayError: (msg: string, err?: Error) => void;
    logJSON: (entity: Record<string, unknown>) => void;
}
export declare class NimFeedback implements Feedback {
    logger: NimLogger;
    constructor(logger: NimLogger);
    warn(msg?: any, ...args: any[]): void;
    progress(msg?: any, ...args: any[]): void;
}
export declare class CaptureLogger implements NimLogger {
    command: string[];
    table: Record<string, unknown>[];
    captured: string[];
    entity: Record<string, unknown>;
    log(msg?: string, ...args: any[]): void;
    handleError(msg: string, err?: Error): never;
    displayError(msg: string, err?: Error): void;
    exit(_code: number): void;
    logJSON(entity: Record<string, unknown>): void;
}
declare class AioCommand extends Command {
    constructor(rawArgv: string[], config?: IConfig);
    handleError(_msg?: string, _err?: any): void;
    parsed: {
        argv: string[];
        args: string[];
        flags: any;
    };
    logJSON(_hdr: string, _entity: Record<string, unknown>): void;
    table(data: Record<string, unknown>[], _columns: Record<string, unknown>, _options?: Record<string, unknown>): void;
    run(_argv?: string[]): Promise<void>;
}
export declare abstract class NimBaseCommand extends Command implements NimLogger {
    abstract runCommand(rawArgv: string[], argv: string[], args: any, flags: any, logger: NimLogger): Promise<any>;
    command: string[];
    usage: Record<string, any>;
    doHelp(): void;
    logJSON(entity: Record<string, unknown>): void;
    run(): Promise<void>;
    runAio(rawArgv: string[], argv: string[], args: any, flags: any, logger: NimLogger, AioClass: typeof AioCommand): Promise<void>;
    makeLogJSON: (logger: CaptureLogger) => (_ignored: string, entity: Record<string, unknown>) => void;
    saveTable: (logger: CaptureLogger) => (data: Record<string, unknown>[], _columns: Record<string, unknown>, _options?: Record<string, unknown>) => void;
    dispatch(argv: string[], skip: number, argTemplates: IArg<string>[], parsedOptions: any): Promise<CaptureLogger>;
    init(): Promise<void>;
    handleError(msg: string, err?: any): never;
    displayError(msg: string, err?: any): void;
    static args: any[];
    static flags: {
        debug: flags.IOptionFlag<string>;
        verbose: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
}
export declare function disambiguateNamespace(namespace: string, apihost: string | undefined): Promise<string>;
export declare function parseAPIHost(host: string | undefined): string | undefined;
export {};
