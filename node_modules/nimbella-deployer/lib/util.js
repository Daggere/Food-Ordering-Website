"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.wskRequest=exports.loadVersions=exports.writeProjectStatus=exports.digestAction=exports.digestPackage=exports.saveUsFromOurselves=exports.generateSecret=exports.wipe=exports.getDeployerAnnotation=exports.getBestProjectName=exports.mapActions=exports.mapPackages=exports.convertPairsToResources=exports.convertToResources=exports.substituteFromEnvAndFiles=exports.promiseFilesAndFilterFiles=exports.filterFiles=exports.extFromRuntime=exports.actionFileToParts=exports.getTargetNamespace=exports.isTargetNamespaceValid=exports.wrapError=exports.wrapSuccess=exports.straysToResponse=exports.combineResponses=exports.emptyResponse=exports.errorStructure=exports.emptyStructure=exports.makeDict=exports.keyVal=exports.validateDeployConfig=exports.needsBuilding=exports.loadProjectConfig=exports.inBrowser=exports.FILES_TO_SKIP=void 0;const api_1=require("./api"),xmlhttprequest_1=require("xmlhttprequest"),fs=require("fs"),os=require("os"),path=require("path"),simplegit=require("simple-git/promise"),mime=require("mime-types"),randomstring=require("randomstring"),crypto=require("crypto"),yaml=require("js-yaml"),makeDebug=require("debug"),github_1=require("./github"),debug=makeDebug("nim:deployer:util");function loadProjectConfig(e,t,r,n,s){return n.readFileContents(e).then(async n=>{try{const i=substituteFromEnvAndFiles(String(n),t,r,s);let o;if(e.endsWith(".json"))o=JSON.parse(i);else{if(i.includes("\t"))throw new Error("YAML configuration may not contain tabs");o=yaml.safeLoad(i)}const a=validateDeployConfig(o);if(a)throw new Error(a);return removeEmptyStringMembers(o),o}catch(e){return errorStructure(e.message?new Error(e.message):e)}})}function needsBuilding(e){const t=e=>e&&"identify"!==e&&".include"!==e;if(t(e.webBuild))return!0;if(e.packages)for(const r of e.packages)if(r.actions)for(const e of r.actions)if(t(e.build))return!0;return!1}function removeEmptyStringMembers(e){e.targetNamespace&&""===e.targetNamespace&&delete e.targetNamespace,e.actionWrapPackage&&""===e.actionWrapPackage&&delete e.targetNamespace,removeEmptyStringMembersFromBucket(e.bucket),removeEmptyStringMembersFromPackages(e.packages)}function removeEmptyStringMembersFromBucket(e){e&&(e.mainPageSuffix&&""===e.mainPageSuffix&&delete e.mainPageSuffix,e.notFoundPage&&""===e.notFoundPage&&delete e.notFoundPage,e.prefixPath&&""===e.prefixPath&&delete e.prefixPath)}function removeEmptyStringMembersFromPackages(e){if(e)for(const t of e)if(t.actions)for(const e of t.actions)e.main&&""===e.main&&delete e.main,e.runtime&&""===e.runtime&&delete e.runtime}function validateDeployConfig(e){let t=!1,r=!1;for(const n in e)if(e[n])switch(n){case"cleanNamespace":if("boolean"!=typeof e[n])return n+" must be a boolean";break;case"targetNamespace":if("string"!=typeof e[n]&&!isValidOwnership(e[n]))return n+" must be a string or a dictionary containing 'test' and/or 'production' members";break;case"web":if(!Array.isArray(e[n]))return"web member must be an array";for(const t of e[n]){const e=validateWebResource(t);if(e)return e}break;case"packages":if(!Array.isArray(e[n]))return"packages member must be an array";for(const t of e[n]){const e=validatePackageSpec(t);if(e)return e}break;case"actionWrapPackage":if("string"!=typeof e[n])return n+" member must be a string";t=e[n].length>0;break;case"bucket":{r=!0;const t=validateBucketSpec(e[n]);if(t)return t;break}case"parameters":case"environment":if(!isDictionary(e[n]))return n+" member must be a dictionary";break;default:return`Invalid key '${n}' found in project.yml`}if(t&&r)return"At most one of actionWrapPackage and bucket may be specified (config specifies both)"}function isDictionary(e){return"object"==typeof e&&!Array.isArray(e)&&null!=e}function isValidOwnership(e){return isDictionary(e)&&("string"==typeof e.production||"string"==typeof e.test)}function validateBucketSpec(e){for(const t in e)switch(t){case"prefixPath":case"mainPageSuffix":case"notFoundPage":if("string"!=typeof e[t])return`'${t}' member of 'bucket' must be a string`;break;case"strip":if("number"!=typeof e[t])return`'${t}' member of 'bucket' must be a number`;break;case"clean":case"useCache":if("boolean"!=typeof e[t])return`'${t}' member of 'bucket' must be a boolean`;break;default:return`Invalid key '${t}' found in 'bucket' in project.yml`}}function validateWebResource(e){for(const t in e){switch(t){case"simpleName":case"mimeType":break;default:return`Invalid key '${t}' found in 'web' in project.yml`}if("string"!=typeof e[t])return`'${t}' member of a 'web' must be a string`}}function validatePackageSpec(e){const t="default"===e.name;for(const r in e)if(e[r])if("name"===r){if("string"!=typeof e[r])return`'${r}' member of a 'package' must be a string`}else if("actions"===r){if(!Array.isArray(e[r]))return"actions member of a 'package' must be an array";for(const t of e[r]){const e=validateActionSpec(t);if(e)return e}}else if("shared"===r||"clean"===r){if("boolean"!=typeof e[r])return`'${r}' member of a 'package' must be a boolean`;if(t&&e[r])return`'${r}' must be absent or false for the default package`}else if("web"===r){if("boolean"!=typeof e[r]&&"raw"!==e[r])return r+" member of an 'package' must be a boolean or the string 'raw'"}else if("environment"===r){const t=validateEnvironment(e[r]);if(t)return t}else{if("parameters"!==r&&"annotations"!==r)return`Invalid key '${r}' found in 'package' in project.yml`;if(!isDictionary(e[r]))return r+" must be a dictionary";if(t&&Object.keys(e[r]).length>0)return`'${r}' must be absent or empty for the default package`}}function validateActionSpec(e){for(const t in e)if(e[t])switch(t){case"name":case"file":case"runtime":case"main":if("string"!=typeof e[t])return`'${t}' member of an 'action' must be a string`;if("runtime"===t&&!validateRuntime(e[t]))return`'${e[t]}' is not a valid runtime value`;break;case"binary":case"clean":if("boolean"!=typeof e[t])return`'${t}' member of an 'action' must be a boolean`;break;case"web":if("boolean"!=typeof e[t]&&"raw"!==e[t])return t+" member of an 'action' must be a boolean or the string 'raw'";break;case"webSecure":if("boolean"!=typeof e[t]&&"string"!=typeof e[t])return`'${t}' member of an 'action' must be a boolean or a string`;break;case"environment":{const r=validateEnvironment(e[t]);if(r)return r}case"annotations":case"parameters":if(!isDictionary(e[t]))return t+" must be a dictionary";break;case"limits":{const r=validateLimits(e[t]);if(r)return r;break}default:return`Invalid key '${t}' found in 'action' clause in project.yml`}}function validateEnvironment(e){if(!isDictionary(e))return"the environment clause must be a dictionary";for(const t in e){const r=e[t];if("string"!=typeof r)return`All environment values must be strings but '${t}' has type '${typeof r}'`}}function validateLimits(e){for(const t in e){const r=e[t];switch(t){case"timeout":case"memory":case"logs":if("number"!=typeof r)return`'${t}' member of a 'limits' clause must be a number`;break;default:return`Invalid key '${t}' found in 'limits' clause in project.yml`}}}function keyVal(e){if(e)return Object.keys(e).map(t=>({key:t,value:e[t]}))}function makeDict(e){const t={};return e.forEach(e=>{t[e.key]=e.value}),t}function emptyStructure(){return{web:[],packages:[],strays:[]}}function errorStructure(e){const t=emptyStructure();return t.error=e,t}function emptyResponse(){return{successes:[],failures:[],ignored:[],namespace:void 0,packageVersions:{},actionVersions:{}}}function combineResponses(e){if(0===e.length)return emptyResponse();return{successes:e.map(e=>e.successes).reduce((e,t)=>e.concat(t),[]),failures:e.map(e=>e.failures).reduce((e,t)=>e.concat(t),[]),ignored:e.map(e=>e.ignored).reduce((e,t)=>e.concat(t)),packageVersions:e.reduce((e,t)=>Object.assign(e,t.packageVersions),{}),actionVersions:e.reduce((e,t)=>Object.assign(e,t.actionVersions),{}),webHashes:e.reduce((e,t)=>Object.assign(e,t.webHashes||{}),{}),namespace:e.map(e=>e.namespace).reduce((e,t)=>e||t)}}function straysToResponse(e){return{successes:[],ignored:e,failures:[],packageVersions:{},actionVersions:{},namespace:void 0}}function wrapSuccess(e,t,r,n,s,i){return{successes:[{name:e,kind:t,skipped:r,wrapping:n}],failures:[],ignored:[],namespace:i,packageVersions:{},actionVersions:s}}function wrapError(e,t){debug("wrapping an error: %O",e),"object"==typeof e&&(e.context=t);const r={successes:[],failures:[e],ignored:[],packageVersions:{},actionVersions:{},namespace:void 0};return debug("wrapped error: %O",r),r}function isTargetNamespaceValid(e,t){return getTargetNamespace(e).then(e=>{if(e===t)return Promise.resolve(!0);throw new Error(`Supplied credentials do not match target namespace '${t}'; deployment aborted`)})}function getTargetNamespace(e){return e.namespaces.list().then(e=>e[0])}function actionFileToParts(e){let t,r,n,s=path.basename(e);if(s.indexOf(".")>0){const e=s.split("."),i=e[e.length-1];let o;2===e.length?s=e[0]:"zip"===i?[s,o]=getNameAndMid(e.slice(0,-1)):s=e.slice(0,-1).join("."),t=o?runtimeFromZipMid(o):runtimeFromExt(i),r=binaryFromExt(i),n="zip"===i}return debug(`action ${s} is ${n?"":"not "}zipped`),{name:s,binary:r,zipped:n,runtime:t}}function getNameAndMid(e){if(2===e.length)return e;const t=e[e.length-1],r=e[e.length-2];if(/^\d+$/.test(t)&&r.includes("-")){return[e.slice(0,-2).join("."),e.slice(-2).join(".")]}return[e.slice(0,-1).join("."),t]}exports.FILES_TO_SKIP=[".gitignore",".DS_Store"],exports.inBrowser="undefined"==typeof process||!process.release||"node"!==process.release.name,exports.loadProjectConfig=loadProjectConfig,exports.needsBuilding=needsBuilding,exports.validateDeployConfig=validateDeployConfig,exports.keyVal=keyVal,exports.makeDict=makeDict,exports.emptyStructure=emptyStructure,exports.errorStructure=errorStructure,exports.emptyResponse=emptyResponse,exports.combineResponses=combineResponses,exports.straysToResponse=straysToResponse,exports.wrapSuccess=wrapSuccess,exports.wrapError=wrapError,exports.isTargetNamespaceValid=isTargetNamespaceValid,exports.getTargetNamespace=getTargetNamespace,exports.actionFileToParts=actionFileToParts;const extTable={},extBinaryTable={zip:!0},validRuntimes={};let runtimesRead=!1;function initRuntimes(){if(!runtimesRead){runtimesRead=!0;const e=require("../runtimes.json").runtimes;for(const t in e){const r=e[t];for(const e of r){const r=Object.keys(e.extensions);if(validRuntimes[e.kind]=r,e.default){validRuntimes[t+":default"]=r;for(const n of r)extTable[n]=t,extBinaryTable[n]=e.extensions[n].binary}}}}}function runtimeFromExt(e){if(initRuntimes(),extTable[e])return extTable[e]+":default"}function runtimeFromZipMid(e){return e.includes("-")?validateRuntime(e.replace("-",":")):validateRuntime(e+":default")}function extFromRuntime(e,t){if(initRuntimes(),!validRuntimes[e])throw new Error(`Invalid runtime ${e} encountered`);{const r=validRuntimes[e];for(const e of r){if(binaryFromExt(e)===t)return e}}}function validateRuntime(e){if(initRuntimes(),e in validRuntimes)return e}function binaryFromExt(e){return!!extBinaryTable[e]}function filterFiles(e){return e.filter(e=>e.isDirectory?e:!e.name.endsWith("~")&&exports.FILES_TO_SKIP.every(t=>e.name!==t))}function promiseFilesAndFilterFiles(e,t){return promiseFiles(e,t).then(e=>e.filter(e=>!e.endsWith("~")&&exports.FILES_TO_SKIP.every(t=>e!==t)))}async function promiseFiles(e,t){debug("promiseFiles called on directory %s",e);const r=[];let n=await promiseFilesRound(e,r,[],t);for(;n.length>0;){const e=n.pop();debug("promiseFiles recursing on subdirectory '%s', with '%d' files accumulated and '%d' subdirectories still pending",e,r.length,n.length),n=await promiseFilesRound(e,r,n,t)}return debug("promiseFiles returning with %d files",r.length),r}async function promiseFilesRound(e,t,r,n){return(await n.readdir(e)).forEach(async n=>{const s=path.join(e,n.name);n.isDirectory?r.push(s):t.push(s)}),r}function substituteFromEnvAndFiles(e,t,r,n){let s="";const i=[],o=t?getPropsFromFile(t):{};debug("envPath: %s",t),debug("props %O",o);let a=findNextSymbol(e),c=!1;for(;a.index>=0;){const t=e.substr(0,a.index),n=e.substr(a.index+2),u=n.indexOf(a.terminator);if(u<0)throw new Error("Runaway variable name or path directive in project.yml");let p;const m=n.substr(0,u).trim();if(debug("substituting for envar: %s",m),")"===a.terminator||/\s/.test(m))c=c||")"!==a.terminator,p=getDictionarySubstitution(m,o,i);else if(m.startsWith("<")){if(")"===a.terminator)throw new Error("Invalid substitution: $("+m+")");p=getSubstituteFromFile(path.join(r,m.slice(1)))}else p=process.env[m]||o[m];p||(i.push(m),p=""),debug("substitution is: %s",p),s=s+t+p,a=findNextSymbol(e=n.substr(u+1))}if(i.length>0){const e="'"+i.join("', '")+"'";throw new Error("The following substitutions could not be resolved: "+e)}return c&&n.warn("Using '${}' for dictionary substitution is now deprecated; use '$()'"),s+e}function findNextSymbol(e){const t=e.indexOf("${"),r=e.indexOf("$("),n=r>=0;return t>=0?n?t<r?{index:t,terminator:"}"}:{index:r,terminator:")"}:{index:t,terminator:"}"}:n?{index:r,terminator:")"}:{index:-1,terminator:""}}function getDictionarySubstitution(e,t,r){debug("dictionary substitution with %s",e);const n={};for(const s of e.split(/\s+/)){debug("token: %s",s);const e=process.env[s]||t[s];e?n[s]=e:r.push(s)}return JSON.stringify(n)}function getSubstituteFromFile(e){if(!fs.existsSync(e))return;const t=getPropsFromFile(e),r=JSON.stringify(t);return"{}"===r?void 0:r}function getPropsFromFile(e){if(!fs.existsSync(e))return{};const t=fs.readFileSync(e);try{return JSON.parse(String(t))}catch(e){}return require("dotenv").parse(t)}function convertToResources(e,t){return e.map(e=>{const r=e.substring(t);return{filePath:e,simpleName:r,mimeType:mime.lookup(r)||void 0}})}function convertPairsToResources(e){return e.map(e=>{const[t,r]=e;return{filePath:t,simpleName:r,mimeType:mime.lookup(r)||void 0}})}function mapPackages(e){const t={};for(const r of e)t[r.name]=r;return t}function mapActions(e){const t={};for(const r of e)t[r.name]=r;return t}async function getBestProjectName(e){const t=await getDeployerAnnotation(e.filePath,e.githubPath);if(t.repository){let e=t.repository;for(e.includes(":")&&(e=e.split(":")[1]),e.endsWith(".git")&&(e=e.slice(0,-4));e.startsWith("/");)e=e.slice(1);return e+"/"+t.projectPath}return t.projectPath}async function getDeployerAnnotation(e,t){if(t)return Promise.resolve(deployerAnnotationFromGithub(t));try{const t=simplegit().silent(!0),r=await t.revparse(["--show-toplevel"]),n=await t.raw(["config","--get","remote.origin.url"]),s=(await t.raw(["config","--get","user.email"])).trim(),i=path.relative(r,path.resolve(e));let o=await t.revparse(["head"]);o=o.substring(0,8);return(await t.status()).isClean()||(o+="++"),{user:s,repository:n.trim(),projectPath:i,commit:o,digest:void 0}}catch(t){return{user:os.userInfo().username.trim(),projectPath:path.resolve(e),digest:void 0}}}function deployerAnnotationFromGithub(e){const t=github_1.parseGithubRef(e);return{digest:void 0,user:"cloud",repository:`githhub:${t.owner}/${t.repo}`,projectPath:t.path,commit:t.ref||"master"}}async function wipe(e){await wipeAll(e.actions,"Action"),debug("Actions wiped"),await wipeAll(e.rules,"Rule"),debug("Rules wiped"),await wipeAll(e.triggers,"Trigger"),debug("Triggers wiped"),await wipeAll(e.packages,"Package"),debug("Packages wiped")}async function wipeAll(e,t){for(;;){const r=await e.list({limit:200});if(0===r.length)return;for(const n of r){let r=n.name;const s=n.namespace.split("/");s.length>1&&(r=s[1]+"/"+r),await e.delete(r),debug("%s %s deleted",t,r)}}}function generateSecret(){return randomstring.generate()}function saveUsFromOurselves(e,t){let r,n;try{r=require("../sensitiveNamespaces.json"),n=require("../productionProjects.json")}catch(e){return!1}return r.includes(e)&&isProductionProject(t,n)}function isProductionProject(e,t){const r=new URL(e).hostname.split(".")[0];if("api"===r)return!0;const n=r.replace("api","nim");return t.includes(n)}function digestPackage(e){const t=crypto.createHash("sha256");digestBoolean(t,e.shared),digestBoolean(t,e.clean),digestDictionary(t,e.annotations),digestDictionary(t,e.parameters);for(const r of e.actions||[])t.update(r.name);return String(t.digest("hex"))}function digestBoolean(e,t){e.update(String(!!t))}function digestDictionary(e,t){if(t){const r=Object.keys(t).sort();for(const n of r){e.update(n);const r=t[n];switch(typeof r){case"string":e.update(r);break;case"boolean":digestBoolean(e,r);break;case"object":digestDictionary(e,r);break;default:e.update(String(r))}}}}function digestAction(e,t){const r=crypto.createHash("sha256");return digestBoolean(r,e.clean),digestBoolean(r,e.binary),digestBoolean(r,e.zipped),r.update(String(e.web)),r.update(String(e.webSecure)),digestDictionary(r,e.annotations),digestDictionary(r,e.parameters),digestDictionary(r,e.limits),r.update(t),e.main&&r.update(e.main),r.update(e.runtime),String(r.digest("hex"))}function writeProjectStatus(e,t,r){debug("writing project status with %O",t);const{apihost:n,namespace:s,packageVersions:i,actionVersions:o,webHashes:a}=t;if(0===Object.keys(o).length&&0===Object.keys(i).length&&0===Object.keys(a).length)return debug("there is no meaningful project status to write"),"";const c=path.join(e,".nimbella");let u=!1;fs.existsSync(c)||(fs.mkdirSync(c),u=!0);let p=[];const m=path.join(c,"versions.json");if(fs.existsSync(m)){debug("version file alread exists");const e=JSON.parse(String(fs.readFileSync(m)));Array.isArray(e)&&(p=e,debug("version list using legacy format, not preserved"))}const l={apihost:n,namespace:s,packageVersions:i,actionVersions:o,webHashes:a},f=p.find(e=>e.apihost===n&&e.namespace===s);return f?(debug("merging new entry into old"),mergeVersions(f,l,r)):(debug("new entry pushed to version list"),p.push(l)),fs.writeFileSync(m,JSON.stringify(p,null,2)),debug("wrote version info to %s",m),u?c:""}function mergeVersions(e,t,r){r?Object.assign(e,t):(Object.assign(e.actionVersions,t.actionVersions),Object.assign(e.packageVersions,t.packageVersions),Object.assign(e.webHashes,t.webHashes))}function loadVersions(e,t,r){const n=path.join(e,".nimbella","versions.json");if(fs.existsSync(n)){const e=JSON.parse(String(fs.readFileSync(n)));for(const n of e)if(t===n.namespace&&r===n.apihost)return n}return{namespace:t,apihost:r,packageVersions:{},actionVersions:{},webHashes:{}}}function wskRequest(e,t){return debug("Request to: %s",e),new Promise((function(r,n){const s=new xmlhttprequest_1.XMLHttpRequest;s.open("GET",e);const i=api_1.getUserAgent();s.setRequestHeader("User-Agent",i),s.onload=function(){this.status>=200&&this.status<300?(debug("useful response"),r(JSON.parse(s.responseText))):(debug("Error from OW %s %s",s.status,s.responseText),n(new Error(s.responseText)))},s.onerror=function(){debug("network error"),n(new Error("Network error"))},t&&(debug("Setting basic authorization header"),s.setRequestHeader("Authorization","Basic "+Buffer.from(t).toString("base64"))),s.send()}))}exports.extFromRuntime=extFromRuntime,exports.filterFiles=filterFiles,exports.promiseFilesAndFilterFiles=promiseFilesAndFilterFiles,exports.substituteFromEnvAndFiles=substituteFromEnvAndFiles,exports.convertToResources=convertToResources,exports.convertPairsToResources=convertPairsToResources,exports.mapPackages=mapPackages,exports.mapActions=mapActions,exports.getBestProjectName=getBestProjectName,exports.getDeployerAnnotation=getDeployerAnnotation,exports.wipe=wipe,exports.generateSecret=generateSecret,exports.saveUsFromOurselves=saveUsFromOurselves,exports.digestPackage=digestPackage,exports.digestAction=digestAction,exports.writeProjectStatus=writeProjectStatus,exports.loadVersions=loadVersions,exports.wskRequest=wskRequest;
