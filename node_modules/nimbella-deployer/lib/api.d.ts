import { DeployStructure, DeployResponse, OWOptions, Credentials, Flags, Includer, Feedback } from './deploy-struct';
import * as openwhisk from 'openwhisk';
import { Persister } from './credentials';
export declare function initializeAPI(userAgent: string): {
    [key: string]: string;
};
export declare function getUserAgent(): string;
export declare function deployProject(path: string, owOptions: OWOptions, credentials: Credentials | undefined, persister: Persister, flags: Flags): Promise<DeployResponse>;
export declare function readPrepareAndBuild(path: string, owOptions: OWOptions, credentials: Credentials, persister: Persister, flags: Flags, userAgent?: string, feedback?: Feedback): Promise<DeployStructure>;
export declare function readAndPrepare(path: string, owOptions: OWOptions, credentials: Credentials, persister: Persister, flags: Flags, userAgent?: string, feedback?: Feedback): Promise<DeployStructure>;
export declare function deploy(todeploy: DeployStructure): Promise<DeployResponse>;
export declare function readProject(projectPath: string, envPath: string, includer: Includer, feedback?: Feedback): Promise<DeployStructure>;
export declare function buildProject(project: DeployStructure): Promise<DeployStructure>;
export declare function prepareToDeploy(inputSpec: DeployStructure, owOptions: OWOptions, credentials: Credentials, persister: Persister, flags: Flags): Promise<DeployStructure>;
export declare function getMessageFromError(err: any): string;
export declare function wipeNamespace(host: string, auth: string): Promise<void>;
export declare function wipePackage(name: string, host: string, auth: string): Promise<openwhisk.Package>;
